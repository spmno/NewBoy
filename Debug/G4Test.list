
G4Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ff4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080071d4  080071d4  000171d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800725c  0800725c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800725c  0800725c  0001725c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007264  08007264  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007264  08007264  00017264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007268  08007268  00017268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800726c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dac  20000010  0800727c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dbc  0800727c  00021dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000209ea  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b5e  00000000  00000000  00040a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a40  00000000  00000000  00044588  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001868  00000000  00000000  00045fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020b04  00000000  00000000  00047830  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015b26  00000000  00000000  00068334  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3b6f  00000000  00000000  0007de5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001519c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e6c  00000000  00000000  00151a44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	080071bc 	.word	0x080071bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	080071bc 	.word	0x080071bc

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <MX_FREERTOS_Init+0x18>)
 8000526:	2100      	movs	r1, #0
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <MX_FREERTOS_Init+0x1c>)
 800052a:	f004 f939 	bl	80047a0 <osThreadNew>
 800052e:	4602      	mov	r2, r0
 8000530:	4b03      	ldr	r3, [pc, #12]	; (8000540 <MX_FREERTOS_Init+0x20>)
 8000532:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	08007208 	.word	0x08007208
 800053c:	08000545 	.word	0x08000545
 8000540:	20001934 	.word	0x20001934

08000544 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800054c:	2001      	movs	r0, #1
 800054e:	f004 f9cd 	bl	80048ec <osDelay>
 8000552:	e7fb      	b.n	800054c <StartDefaultTask+0x8>

08000554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800055a:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <MX_DMA_Init+0x50>)
 800055c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800055e:	4a11      	ldr	r2, [pc, #68]	; (80005a4 <MX_DMA_Init+0x50>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	6493      	str	r3, [r2, #72]	; 0x48
 8000566:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MX_DMA_Init+0x50>)
 8000568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_DMA_Init+0x50>)
 8000574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000576:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <MX_DMA_Init+0x50>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6493      	str	r3, [r2, #72]	; 0x48
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_DMA_Init+0x50>)
 8000580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2100      	movs	r1, #0
 800058e:	200b      	movs	r0, #11
 8000590:	f000 fe32 	bl	80011f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000594:	200b      	movs	r0, #11
 8000596:	f000 fe49 	bl	800122c <HAL_NVIC_EnableIRQ>

}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0

  hfdcan1.Instance = FDCAN1;
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <MX_FDCAN1_Init+0x84>)
 80005ae:	4a20      	ldr	r2, [pc, #128]	; (8000630 <MX_FDCAN1_Init+0x88>)
 80005b0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80005b2:	4b1e      	ldr	r3, [pc, #120]	; (800062c <MX_FDCAN1_Init+0x84>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <MX_FDCAN1_Init+0x84>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80005be:	4b1b      	ldr	r3, [pc, #108]	; (800062c <MX_FDCAN1_Init+0x84>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <MX_FDCAN1_Init+0x84>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <MX_FDCAN1_Init+0x84>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <MX_FDCAN1_Init+0x84>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <MX_FDCAN1_Init+0x84>)
 80005d8:	2201      	movs	r2, #1
 80005da:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <MX_FDCAN1_Init+0x84>)
 80005de:	2201      	movs	r2, #1
 80005e0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_FDCAN1_Init+0x84>)
 80005e4:	2202      	movs	r2, #2
 80005e6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <MX_FDCAN1_Init+0x84>)
 80005ea:	2202      	movs	r2, #2
 80005ec:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_FDCAN1_Init+0x84>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <MX_FDCAN1_Init+0x84>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_FDCAN1_Init+0x84>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <MX_FDCAN1_Init+0x84>)
 8000602:	2201      	movs	r2, #1
 8000604:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_FDCAN1_Init+0x84>)
 8000608:	2200      	movs	r2, #0
 800060a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <MX_FDCAN1_Init+0x84>)
 800060e:	2200      	movs	r2, #0
 8000610:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_FDCAN1_Init+0x84>)
 8000614:	2200      	movs	r2, #0
 8000616:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <MX_FDCAN1_Init+0x84>)
 800061a:	f001 f8ef 	bl	80017fc <HAL_FDCAN_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000624:	f000 f94e 	bl	80008c4 <Error_Handler>
  }

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20001938 	.word	0x20001938
 8000630:	40006400 	.word	0x40006400

08000634 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <HAL_FDCAN_MspInit+0x80>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d129      	bne.n	80006aa <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <HAL_FDCAN_MspInit+0x84>)
 8000658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800065a:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <HAL_FDCAN_MspInit+0x84>)
 800065c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000660:	6593      	str	r3, [r2, #88]	; 0x58
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <HAL_FDCAN_MspInit+0x84>)
 8000664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_FDCAN_MspInit+0x84>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	4a11      	ldr	r2, [pc, #68]	; (80006b8 <HAL_FDCAN_MspInit+0x84>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <HAL_FDCAN_MspInit+0x84>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000686:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800068a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068c:	2302      	movs	r3, #2
 800068e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000698:	2309      	movs	r3, #9
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a6:	f001 fa59 	bl	8001b5c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	; 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40006400 	.word	0x40006400
 80006b8:	40021000 	.word	0x40021000

080006bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	; 0x28
 80006c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <MX_GPIO_Init+0xc4>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4a2a      	ldr	r2, [pc, #168]	; (8000780 <MX_GPIO_Init+0xc4>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <MX_GPIO_Init+0xc4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ea:	4b25      	ldr	r3, [pc, #148]	; (8000780 <MX_GPIO_Init+0xc4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	4a24      	ldr	r2, [pc, #144]	; (8000780 <MX_GPIO_Init+0xc4>)
 80006f0:	f043 0320 	orr.w	r3, r3, #32
 80006f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f6:	4b22      	ldr	r3, [pc, #136]	; (8000780 <MX_GPIO_Init+0xc4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	f003 0320 	and.w	r3, r3, #32
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_GPIO_Init+0xc4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4a1e      	ldr	r2, [pc, #120]	; (8000780 <MX_GPIO_Init+0xc4>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_GPIO_Init+0xc4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_GPIO_Init+0xc4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a18      	ldr	r2, [pc, #96]	; (8000780 <MX_GPIO_Init+0xc4>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_GPIO_Init+0xc4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2120      	movs	r1, #32
 8000736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073a:	f001 fb91 	bl	8001e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800073e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_GPIO_Init+0xc8>)
 8000746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4619      	mov	r1, r3
 8000752:	480d      	ldr	r0, [pc, #52]	; (8000788 <MX_GPIO_Init+0xcc>)
 8000754:	f001 fa02 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000758:	2320      	movs	r3, #32
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000772:	f001 f9f3 	bl	8001b5c <HAL_GPIO_Init>

}
 8000776:	bf00      	nop
 8000778:	3728      	adds	r7, #40	; 0x28
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000
 8000784:	10110000 	.word	0x10110000
 8000788:	48000800 	.word	0x48000800

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000790:	f000 fc43 	bl	800101a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000794:	f000 f815 	bl	80007c2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000798:	f7ff ff90 	bl	80006bc <MX_GPIO_Init>
  MX_DMA_Init();
 800079c:	f7ff feda 	bl	8000554 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80007a0:	f000 f998 	bl	8000ad4 <MX_LPUART1_UART_Init>
  MX_FDCAN1_Init();
 80007a4:	f7ff ff00 	bl	80005a8 <MX_FDCAN1_Init>
  MX_UART4_Init();
 80007a8:	f000 f9da 	bl	8000b60 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80007ac:	f000 fa24 	bl	8000bf8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80007b0:	f000 fa6e 	bl	8000c90 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80007b4:	f003 ff8a 	bl	80046cc <osKernelInitialize>
  MX_FREERTOS_Init();
 80007b8:	f7ff feb2 	bl	8000520 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80007bc:	f003 ffba 	bl	8004734 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <main+0x34>

080007c2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b0a4      	sub	sp, #144	; 0x90
 80007c6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007cc:	2238      	movs	r2, #56	; 0x38
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f006 fcea 	bl	80071aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e6:	463b      	mov	r3, r7
 80007e8:	2244      	movs	r2, #68	; 0x44
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f006 fcdc 	bl	80071aa <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f001 fb4c 	bl	8001e90 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f8:	2302      	movs	r3, #2
 80007fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000800:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000802:	2340      	movs	r3, #64	; 0x40
 8000804:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000806:	2302      	movs	r3, #2
 8000808:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080a:	2302      	movs	r3, #2
 800080c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800080e:	2304      	movs	r3, #4
 8000810:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000812:	2355      	movs	r3, #85	; 0x55
 8000814:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000818:	2302      	movs	r3, #2
 800081a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800081e:	2302      	movs	r3, #2
 8000820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000824:	2302      	movs	r3, #2
 8000826:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800082e:	4618      	mov	r0, r3
 8000830:	f001 fbe2 	bl	8001ff8 <HAL_RCC_OscConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800083a:	f000 f843 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	230f      	movs	r3, #15
 8000840:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000842:	2303      	movs	r3, #3
 8000844:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000852:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000856:	2104      	movs	r1, #4
 8000858:	4618      	mov	r0, r3
 800085a:	f001 fee5 	bl	8002628 <HAL_RCC_ClockConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000864:	f000 f82e 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000868:	f241 032d 	movw	r3, #4141	; 0x102d
 800086c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_LPUART1
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800087e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	4618      	mov	r0, r3
 8000888:	f002 f91c 	bl	8002ac4 <HAL_RCCEx_PeriphCLKConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000892:	f000 f817 	bl	80008c4 <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3790      	adds	r7, #144	; 0x90
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d101      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b2:	f000 fbcb 	bl	800104c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40012c00 	.word	0x40012c00

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <HAL_MspInit+0x44>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <HAL_MspInit+0x44>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6613      	str	r3, [r2, #96]	; 0x60
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_MspInit+0x44>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_MspInit+0x44>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <HAL_MspInit+0x44>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6593      	str	r3, [r2, #88]	; 0x58
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_MspInit+0x44>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800090a:	f001 fb65 	bl	8001fd8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	; 0x30
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800092c:	2300      	movs	r3, #0
 800092e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000932:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <HAL_InitTick+0xcc>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000936:	4a2c      	ldr	r2, [pc, #176]	; (80009e8 <HAL_InitTick+0xcc>)
 8000938:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800093c:	6613      	str	r3, [r2, #96]	; 0x60
 800093e:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <HAL_InitTick+0xcc>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800094a:	f107 020c 	add.w	r2, r7, #12
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f002 f83d 	bl	80029d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800095a:	f002 f825 	bl	80029a8 <HAL_RCC_GetPCLK2Freq>
 800095e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000962:	4a22      	ldr	r2, [pc, #136]	; (80009ec <HAL_InitTick+0xd0>)
 8000964:	fba2 2303 	umull	r2, r3, r2, r3
 8000968:	0c9b      	lsrs	r3, r3, #18
 800096a:	3b01      	subs	r3, #1
 800096c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800096e:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <HAL_InitTick+0xd4>)
 8000970:	4a20      	ldr	r2, [pc, #128]	; (80009f4 <HAL_InitTick+0xd8>)
 8000972:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <HAL_InitTick+0xd4>)
 8000976:	f240 32e7 	movw	r2, #999	; 0x3e7
 800097a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800097c:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <HAL_InitTick+0xd4>)
 800097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000980:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <HAL_InitTick+0xd4>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <HAL_InitTick+0xd4>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  status = HAL_TIM_Base_Init(&htim1);
 800098e:	4818      	ldr	r0, [pc, #96]	; (80009f0 <HAL_InitTick+0xd4>)
 8000990:	f002 fa88 	bl	8002ea4 <HAL_TIM_Base_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800099a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d11b      	bne.n	80009da <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009a2:	4813      	ldr	r0, [pc, #76]	; (80009f0 <HAL_InitTick+0xd4>)
 80009a4:	f002 fae0 	bl	8002f68 <HAL_TIM_Base_Start_IT>
 80009a8:	4603      	mov	r3, r0
 80009aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80009ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d111      	bne.n	80009da <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009b6:	2019      	movs	r0, #25
 80009b8:	f000 fc38 	bl	800122c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b0f      	cmp	r3, #15
 80009c0:	d808      	bhi.n	80009d4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80009c2:	2200      	movs	r2, #0
 80009c4:	6879      	ldr	r1, [r7, #4]
 80009c6:	2019      	movs	r0, #25
 80009c8:	f000 fc16 	bl	80011f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009cc:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_InitTick+0xdc>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
 80009d2:	e002      	b.n	80009da <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 80009da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3730      	adds	r7, #48	; 0x30
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000
 80009ec:	431bde83 	.word	0x431bde83
 80009f0:	2000199c 	.word	0x2000199c
 80009f4:	40012c00 	.word	0x40012c00
 80009f8:	20000004 	.word	0x20000004

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <MemManage_Handler+0x4>

08000a16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <DMA1_Channel1_IRQHandler+0x10>)
 8000a36:	f000 fd91 	bl	800155c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20001c8c 	.word	0x20001c8c

08000a44 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a4a:	f002 faf7 	bl	800303c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2000199c 	.word	0x2000199c

08000a58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <USART1_IRQHandler+0x10>)
 8000a5e:	f002 fe43 	bl	80036e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20001c00 	.word	0x20001c00

08000a6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <USART3_IRQHandler+0x10>)
 8000a72:	f002 fe39 	bl	80036e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20001ae8 	.word	0x20001ae8

08000a80 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <UART4_IRQHandler+0x10>)
 8000a86:	f002 fe2f 	bl	80036e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20001cec 	.word	0x20001cec

08000a94 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <LPUART1_IRQHandler+0x10>)
 8000a9a:	f002 fe25 	bl	80036e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20001b74 	.word	0x20001b74

08000aa8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <SystemInit+0x28>)
 8000aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab2:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <SystemInit+0x28>)
 8000ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <SystemInit+0x28>)
 8000abe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ac2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <MX_LPUART1_UART_Init+0x84>)
 8000ada:	4a20      	ldr	r2, [pc, #128]	; (8000b5c <MX_LPUART1_UART_Init+0x88>)
 8000adc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000ade:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <MX_LPUART1_UART_Init+0x84>)
 8000ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <MX_LPUART1_UART_Init+0x84>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_LPUART1_UART_Init+0x84>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <MX_LPUART1_UART_Init+0x84>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_LPUART1_UART_Init+0x84>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <MX_LPUART1_UART_Init+0x84>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_LPUART1_UART_Init+0x84>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_LPUART1_UART_Init+0x84>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b10:	4811      	ldr	r0, [pc, #68]	; (8000b58 <MX_LPUART1_UART_Init+0x84>)
 8000b12:	f002 fd11 	bl	8003538 <HAL_UART_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000b1c:	f7ff fed2 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b20:	2100      	movs	r1, #0
 8000b22:	480d      	ldr	r0, [pc, #52]	; (8000b58 <MX_LPUART1_UART_Init+0x84>)
 8000b24:	f003 fce5 	bl	80044f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 8000b2e:	f7ff fec9 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b32:	2100      	movs	r1, #0
 8000b34:	4808      	ldr	r0, [pc, #32]	; (8000b58 <MX_LPUART1_UART_Init+0x84>)
 8000b36:	f003 fd1a 	bl	800456e <HAL_UARTEx_SetRxFifoThreshold>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 8000b40:	f7ff fec0 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_LPUART1_UART_Init+0x84>)
 8000b46:	f003 fc9b 	bl	8004480 <HAL_UARTEx_DisableFifoMode>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 8000b50:	f7ff feb8 	bl	80008c4 <Error_Handler>
  }

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20001b74 	.word	0x20001b74
 8000b5c:	40008000 	.word	0x40008000

08000b60 <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000b66:	4a23      	ldr	r2, [pc, #140]	; (8000bf4 <MX_UART4_Init+0x94>)
 8000b68:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000b6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b70:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ba8:	4811      	ldr	r0, [pc, #68]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000baa:	f002 fcc5 	bl	8003538 <HAL_UART_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000bb4:	f7ff fe86 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000bbc:	f003 fc99 	bl	80044f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000bc6:	f7ff fe7d 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4808      	ldr	r0, [pc, #32]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000bce:	f003 fcce 	bl	800456e <HAL_UARTEx_SetRxFifoThreshold>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000bd8:	f7ff fe74 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_UART4_Init+0x90>)
 8000bde:	f003 fc4f 	bl	8004480 <HAL_UARTEx_DisableFifoMode>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000be8:	f7ff fe6c 	bl	80008c4 <Error_Handler>
  }

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20001cec 	.word	0x20001cec
 8000bf4:	40004c00 	.word	0x40004c00

08000bf8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000bfc:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000bfe:	4a23      	ldr	r2, [pc, #140]	; (8000c8c <MX_USART1_UART_Init+0x94>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c40:	4811      	ldr	r0, [pc, #68]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c42:	f002 fc79 	bl	8003538 <HAL_UART_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c4c:	f7ff fe3a 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c50:	2100      	movs	r1, #0
 8000c52:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c54:	f003 fc4d 	bl	80044f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c5e:	f7ff fe31 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c62:	2100      	movs	r1, #0
 8000c64:	4808      	ldr	r0, [pc, #32]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c66:	f003 fc82 	bl	800456e <HAL_UARTEx_SetRxFifoThreshold>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c70:	f7ff fe28 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <MX_USART1_UART_Init+0x90>)
 8000c76:	f003 fc03 	bl	8004480 <HAL_UARTEx_DisableFifoMode>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c80:	f7ff fe20 	bl	80008c4 <Error_Handler>
  }

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20001c00 	.word	0x20001c00
 8000c8c:	40013800 	.word	0x40013800

08000c90 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000c94:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000c96:	4a23      	ldr	r2, [pc, #140]	; (8000d24 <MX_USART3_UART_Init+0x94>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cd8:	4811      	ldr	r0, [pc, #68]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cda:	f002 fc2d 	bl	8003538 <HAL_UART_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ce4:	f7ff fdee 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce8:	2100      	movs	r1, #0
 8000cea:	480d      	ldr	r0, [pc, #52]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cec:	f003 fc01 	bl	80044f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cf6:	f7ff fde5 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4808      	ldr	r0, [pc, #32]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000cfe:	f003 fc36 	bl	800456e <HAL_UARTEx_SetRxFifoThreshold>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d08:	f7ff fddc 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_USART3_UART_Init+0x90>)
 8000d0e:	f003 fbb7 	bl	8004480 <HAL_UARTEx_DisableFifoMode>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d18:	f7ff fdd4 	bl	80008c4 <Error_Handler>
  }

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20001ae8 	.word	0x20001ae8
 8000d24:	40004800 	.word	0x40004800

08000d28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b090      	sub	sp, #64	; 0x40
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a95      	ldr	r2, [pc, #596]	; (8000f9c <HAL_UART_MspInit+0x274>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	f040 8081 	bne.w	8000e4e <HAL_UART_MspInit+0x126>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d4c:	4b94      	ldr	r3, [pc, #592]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d50:	4a93      	ldr	r2, [pc, #588]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d58:	4b91      	ldr	r3, [pc, #580]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d62:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	4b8e      	ldr	r3, [pc, #568]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d68:	4a8d      	ldr	r2, [pc, #564]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d70:	4b8b      	ldr	r3, [pc, #556]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d8c:	230c      	movs	r3, #12
 8000d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(LPUART1_TX_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d94:	4619      	mov	r1, r3
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9a:	f000 fedf 	bl	8001b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LPUART1_RX_Pin;
 8000d9e:	2308      	movs	r3, #8
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000dae:	230c      	movs	r3, #12
 8000db0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(LPUART1_RX_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db6:	4619      	mov	r1, r3
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f000 fece 	bl	8001b5c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000dc0:	4b78      	ldr	r3, [pc, #480]	; (8000fa4 <HAL_UART_MspInit+0x27c>)
 8000dc2:	4a79      	ldr	r2, [pc, #484]	; (8000fa8 <HAL_UART_MspInit+0x280>)
 8000dc4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000dc6:	4b77      	ldr	r3, [pc, #476]	; (8000fa4 <HAL_UART_MspInit+0x27c>)
 8000dc8:	2222      	movs	r2, #34	; 0x22
 8000dca:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dcc:	4b75      	ldr	r3, [pc, #468]	; (8000fa4 <HAL_UART_MspInit+0x27c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd2:	4b74      	ldr	r3, [pc, #464]	; (8000fa4 <HAL_UART_MspInit+0x27c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd8:	4b72      	ldr	r3, [pc, #456]	; (8000fa4 <HAL_UART_MspInit+0x27c>)
 8000dda:	2280      	movs	r2, #128	; 0x80
 8000ddc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dde:	4b71      	ldr	r3, [pc, #452]	; (8000fa4 <HAL_UART_MspInit+0x27c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000de4:	4b6f      	ldr	r3, [pc, #444]	; (8000fa4 <HAL_UART_MspInit+0x27c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000dea:	4b6e      	ldr	r3, [pc, #440]	; (8000fa4 <HAL_UART_MspInit+0x27c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000df0:	4b6c      	ldr	r3, [pc, #432]	; (8000fa4 <HAL_UART_MspInit+0x27c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000df6:	486b      	ldr	r0, [pc, #428]	; (8000fa4 <HAL_UART_MspInit+0x27c>)
 8000df8:	f000 fa26 	bl	8001248 <HAL_DMA_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8000e02:	f7ff fd5f 	bl	80008c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a66      	ldr	r2, [pc, #408]	; (8000fa4 <HAL_UART_MspInit+0x27c>)
 8000e0a:	679a      	str	r2, [r3, #120]	; 0x78
 8000e0c:	4a65      	ldr	r2, [pc, #404]	; (8000fa4 <HAL_UART_MspInit+0x27c>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	205b      	movs	r0, #91	; 0x5b
 8000e18:	f000 f9ee 	bl	80011f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000e1c:	205b      	movs	r0, #91	; 0x5b
 8000e1e:	f000 fa05 	bl	800122c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */
    __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_IDLE);
 8000e22:	4b62      	ldr	r3, [pc, #392]	; (8000fac <HAL_UART_MspInit+0x284>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b60      	ldr	r3, [pc, #384]	; (8000fac <HAL_UART_MspInit+0x284>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f042 0210 	orr.w	r2, r2, #16
 8000e30:	601a      	str	r2, [r3, #0]
    HAL_UART_Receive_DMA(&hlpuart1, receive_buff, BUFFER_SIZE);
 8000e32:	22ff      	movs	r2, #255	; 0xff
 8000e34:	495e      	ldr	r1, [pc, #376]	; (8000fb0 <HAL_UART_MspInit+0x288>)
 8000e36:	485d      	ldr	r0, [pc, #372]	; (8000fac <HAL_UART_MspInit+0x284>)
 8000e38:	f002 fbce 	bl	80035d8 <HAL_UART_Receive_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_TC);				//关闭DMA中断
 8000e3c:	4b59      	ldr	r3, [pc, #356]	; (8000fa4 <HAL_UART_MspInit+0x27c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4b58      	ldr	r3, [pc, #352]	; (8000fa4 <HAL_UART_MspInit+0x27c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 0202 	bic.w	r2, r2, #2
 8000e4a:	601a      	str	r2, [r3, #0]
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e4c:	e0a2      	b.n	8000f94 <HAL_UART_MspInit+0x26c>
  else if(uartHandle->Instance==UART4)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a58      	ldr	r2, [pc, #352]	; (8000fb4 <HAL_UART_MspInit+0x28c>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d131      	bne.n	8000ebc <HAL_UART_MspInit+0x194>
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e58:	4b51      	ldr	r3, [pc, #324]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5c:	4a50      	ldr	r2, [pc, #320]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000e5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e62:	6593      	str	r3, [r2, #88]	; 0x58
 8000e64:	4b4e      	ldr	r3, [pc, #312]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e6c:	623b      	str	r3, [r7, #32]
 8000e6e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e70:	4b4b      	ldr	r3, [pc, #300]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e74:	4a4a      	ldr	r2, [pc, #296]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7c:	4b48      	ldr	r3, [pc, #288]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	61fb      	str	r3, [r7, #28]
 8000e86:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000e9a:	2305      	movs	r3, #5
 8000e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4844      	ldr	r0, [pc, #272]	; (8000fb8 <HAL_UART_MspInit+0x290>)
 8000ea6:	f000 fe59 	bl	8001b5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	2034      	movs	r0, #52	; 0x34
 8000eb0:	f000 f9a2 	bl	80011f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000eb4:	2034      	movs	r0, #52	; 0x34
 8000eb6:	f000 f9b9 	bl	800122c <HAL_NVIC_EnableIRQ>
}
 8000eba:	e06b      	b.n	8000f94 <HAL_UART_MspInit+0x26c>
  else if(uartHandle->Instance==USART1)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a3e      	ldr	r2, [pc, #248]	; (8000fbc <HAL_UART_MspInit+0x294>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d130      	bne.n	8000f28 <HAL_UART_MspInit+0x200>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ec6:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eca:	4a35      	ldr	r2, [pc, #212]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ed2:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eda:	61bb      	str	r3, [r7, #24]
 8000edc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	4a2f      	ldr	r2, [pc, #188]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ef6:	2330      	movs	r3, #48	; 0x30
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f06:	2307      	movs	r3, #7
 8000f08:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4829      	ldr	r0, [pc, #164]	; (8000fb8 <HAL_UART_MspInit+0x290>)
 8000f12:	f000 fe23 	bl	8001b5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2025      	movs	r0, #37	; 0x25
 8000f1c:	f000 f96c 	bl	80011f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f20:	2025      	movs	r0, #37	; 0x25
 8000f22:	f000 f983 	bl	800122c <HAL_NVIC_EnableIRQ>
}
 8000f26:	e035      	b.n	8000f94 <HAL_UART_MspInit+0x26c>
  else if(uartHandle->Instance==USART3)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a24      	ldr	r2, [pc, #144]	; (8000fc0 <HAL_UART_MspInit+0x298>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d130      	bne.n	8000f94 <HAL_UART_MspInit+0x26c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f36:	4a1a      	ldr	r2, [pc, #104]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_UART_MspInit+0x278>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f74:	2307      	movs	r3, #7
 8000f76:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4811      	ldr	r0, [pc, #68]	; (8000fc4 <HAL_UART_MspInit+0x29c>)
 8000f80:	f000 fdec 	bl	8001b5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	2027      	movs	r0, #39	; 0x27
 8000f8a:	f000 f935 	bl	80011f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f8e:	2027      	movs	r0, #39	; 0x27
 8000f90:	f000 f94c 	bl	800122c <HAL_NVIC_EnableIRQ>
}
 8000f94:	bf00      	nop
 8000f96:	3740      	adds	r7, #64	; 0x40
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40008000 	.word	0x40008000
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	20001c8c 	.word	0x20001c8c
 8000fa8:	40020008 	.word	0x40020008
 8000fac:	20001b74 	.word	0x20001b74
 8000fb0:	200019e8 	.word	0x200019e8
 8000fb4:	40004c00 	.word	0x40004c00
 8000fb8:	48000800 	.word	0x48000800
 8000fbc:	40013800 	.word	0x40013800
 8000fc0:	40004800 	.word	0x40004800
 8000fc4:	48000400 	.word	0x48000400

08000fc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fce:	490e      	ldr	r1, [pc, #56]	; (8001008 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fd0:	4a0e      	ldr	r2, [pc, #56]	; (800100c <LoopForever+0xe>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fe4:	4c0b      	ldr	r4, [pc, #44]	; (8001014 <LoopForever+0x16>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff2:	f7ff fd59 	bl	8000aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff6:	f006 f8a9 	bl	800714c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ffa:	f7ff fbc7 	bl	800078c <main>

08000ffe <LoopForever>:

LoopForever:
    b LoopForever
 8000ffe:	e7fe      	b.n	8000ffe <LoopForever>
  ldr   r0, =_estack
 8001000:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001008:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800100c:	0800726c 	.word	0x0800726c
  ldr r2, =_sbss
 8001010:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001014:	20001dbc 	.word	0x20001dbc

08001018 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC1_2_IRQHandler>

0800101a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001020:	2300      	movs	r3, #0
 8001022:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001024:	2003      	movs	r0, #3
 8001026:	f000 f8dc 	bl	80011e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff fc76 	bl	800091c <HAL_InitTick>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	71fb      	strb	r3, [r7, #7]
 800103a:	e001      	b.n	8001040 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800103c:	f7ff fc4a 	bl	80008d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001040:	79fb      	ldrb	r3, [r7, #7]

}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_IncTick+0x1c>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_IncTick+0x20>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4413      	add	r3, r2
 800105a:	4a03      	ldr	r2, [pc, #12]	; (8001068 <HAL_IncTick+0x1c>)
 800105c:	6013      	str	r3, [r2, #0]
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	20001d78 	.word	0x20001d78
 800106c:	20000008 	.word	0x20000008

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20001d78 	.word	0x20001d78

08001088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db0b      	blt.n	8001116 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f003 021f 	and.w	r2, r3, #31
 8001104:	4907      	ldr	r1, [pc, #28]	; (8001124 <__NVIC_EnableIRQ+0x38>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	095b      	lsrs	r3, r3, #5
 800110c:	2001      	movs	r0, #1
 800110e:	fa00 f202 	lsl.w	r2, r0, r2
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000e100 	.word	0xe000e100

08001128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db0a      	blt.n	8001152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	490c      	ldr	r1, [pc, #48]	; (8001174 <__NVIC_SetPriority+0x4c>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001150:	e00a      	b.n	8001168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4908      	ldr	r1, [pc, #32]	; (8001178 <__NVIC_SetPriority+0x50>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	3b04      	subs	r3, #4
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	440b      	add	r3, r1
 8001166:	761a      	strb	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000e100 	.word	0xe000e100
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2b04      	cmp	r3, #4
 8001198:	bf28      	it	cs
 800119a:	2304      	movcs	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3304      	adds	r3, #4
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d902      	bls.n	80011ac <NVIC_EncodePriority+0x30>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3b03      	subs	r3, #3
 80011aa:	e000      	b.n	80011ae <NVIC_EncodePriority+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	4313      	orrs	r3, r2
         );
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ff4c 	bl	8001088 <__NVIC_SetPriorityGrouping>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001206:	f7ff ff63 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 800120a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	68b9      	ldr	r1, [r7, #8]
 8001210:	6978      	ldr	r0, [r7, #20]
 8001212:	f7ff ffb3 	bl	800117c <NVIC_EncodePriority>
 8001216:	4602      	mov	r2, r0
 8001218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff82 	bl	8001128 <__NVIC_SetPriority>
}
 8001224:	bf00      	nop
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff56 	bl	80010ec <__NVIC_EnableIRQ>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e08d      	b.n	8001376 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	4b47      	ldr	r3, [pc, #284]	; (8001380 <HAL_DMA_Init+0x138>)
 8001262:	429a      	cmp	r2, r3
 8001264:	d80f      	bhi.n	8001286 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	4b45      	ldr	r3, [pc, #276]	; (8001384 <HAL_DMA_Init+0x13c>)
 800126e:	4413      	add	r3, r2
 8001270:	4a45      	ldr	r2, [pc, #276]	; (8001388 <HAL_DMA_Init+0x140>)
 8001272:	fba2 2303 	umull	r2, r3, r2, r3
 8001276:	091b      	lsrs	r3, r3, #4
 8001278:	009a      	lsls	r2, r3, #2
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a42      	ldr	r2, [pc, #264]	; (800138c <HAL_DMA_Init+0x144>)
 8001282:	641a      	str	r2, [r3, #64]	; 0x40
 8001284:	e00e      	b.n	80012a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	4b40      	ldr	r3, [pc, #256]	; (8001390 <HAL_DMA_Init+0x148>)
 800128e:	4413      	add	r3, r2
 8001290:	4a3d      	ldr	r2, [pc, #244]	; (8001388 <HAL_DMA_Init+0x140>)
 8001292:	fba2 2303 	umull	r2, r3, r2, r3
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	009a      	lsls	r2, r3, #2
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a3c      	ldr	r2, [pc, #240]	; (8001394 <HAL_DMA_Init+0x14c>)
 80012a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2202      	movs	r2, #2
 80012a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80012ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80012c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 fa1e 	bl	8001738 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001304:	d102      	bne.n	800130c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001320:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d010      	beq.n	800134c <HAL_DMA_Init+0x104>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b04      	cmp	r3, #4
 8001330:	d80c      	bhi.n	800134c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 fa3e 	bl	80017b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	e008      	b.n	800135e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40020407 	.word	0x40020407
 8001384:	bffdfff8 	.word	0xbffdfff8
 8001388:	cccccccd 	.word	0xcccccccd
 800138c:	40020000 	.word	0x40020000
 8001390:	bffdfbf8 	.word	0xbffdfbf8
 8001394:	40020400 	.word	0x40020400

08001398 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <HAL_DMA_Start_IT+0x20>
 80013b4:	2302      	movs	r3, #2
 80013b6:	e066      	b.n	8001486 <HAL_DMA_Start_IT+0xee>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d155      	bne.n	8001478 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2202      	movs	r2, #2
 80013d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0201 	bic.w	r2, r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	68b9      	ldr	r1, [r7, #8]
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f000 f962 	bl	80016ba <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d008      	beq.n	8001410 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f042 020e 	orr.w	r2, r2, #14
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	e00f      	b.n	8001430 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0204 	bic.w	r2, r2, #4
 800141e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 020a 	orr.w	r2, r2, #10
 800142e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d007      	beq.n	800144e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800144c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001452:	2b00      	cmp	r3, #0
 8001454:	d007      	beq.n	8001466 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001464:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f042 0201 	orr.w	r2, r2, #1
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	e005      	b.n	8001484 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001480:	2302      	movs	r3, #2
 8001482:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001484:	7dfb      	ldrb	r3, [r7, #23]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d00d      	beq.n	80014c2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2204      	movs	r2, #4
 80014aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	73fb      	strb	r3, [r7, #15]
 80014c0:	e047      	b.n	8001552 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 020e 	bic.w	r2, r2, #14
 80014d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0201 	bic.w	r2, r2, #1
 80014e0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f003 021f 	and.w	r2, r3, #31
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	2101      	movs	r1, #1
 8001500:	fa01 f202 	lsl.w	r2, r1, r2
 8001504:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800150e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00c      	beq.n	8001532 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001522:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001526:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001530:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	4798      	blx	r3
    }
  }
  return status;
 8001552:	7bfb      	ldrb	r3, [r7, #15]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001578:	f003 031f 	and.w	r3, r3, #31
 800157c:	2204      	movs	r2, #4
 800157e:	409a      	lsls	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4013      	ands	r3, r2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d026      	beq.n	80015d6 <HAL_DMA_IRQHandler+0x7a>
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	2b00      	cmp	r3, #0
 8001590:	d021      	beq.n	80015d6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0320 	and.w	r3, r3, #32
 800159c:	2b00      	cmp	r3, #0
 800159e:	d107      	bne.n	80015b0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0204 	bic.w	r2, r2, #4
 80015ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	2104      	movs	r1, #4
 80015be:	fa01 f202 	lsl.w	r2, r1, r2
 80015c2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d071      	beq.n	80016b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80015d4:	e06c      	b.n	80016b0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	f003 031f 	and.w	r3, r3, #31
 80015de:	2202      	movs	r2, #2
 80015e0:	409a      	lsls	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d02e      	beq.n	8001648 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d029      	beq.n	8001648 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0320 	and.w	r3, r3, #32
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10b      	bne.n	800161a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 020a 	bic.w	r2, r2, #10
 8001610:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f003 021f 	and.w	r2, r3, #31
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	2102      	movs	r1, #2
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163a:	2b00      	cmp	r3, #0
 800163c:	d038      	beq.n	80016b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001646:	e033      	b.n	80016b0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164c:	f003 031f 	and.w	r3, r3, #31
 8001650:	2208      	movs	r2, #8
 8001652:	409a      	lsls	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d02a      	beq.n	80016b2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d025      	beq.n	80016b2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 020e 	bic.w	r2, r2, #14
 8001674:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f003 021f 	and.w	r2, r3, #31
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	2101      	movs	r1, #1
 8001684:	fa01 f202 	lsl.w	r2, r1, r2
 8001688:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
}
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b085      	sub	sp, #20
 80016be:	af00      	add	r7, sp, #0
 80016c0:	60f8      	str	r0, [r7, #12]
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016d0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d004      	beq.n	80016e4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016e2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	2101      	movs	r1, #1
 80016f2:	fa01 f202 	lsl.w	r2, r1, r2
 80016f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b10      	cmp	r3, #16
 8001706:	d108      	bne.n	800171a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001718:	e007      	b.n	800172a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	60da      	str	r2, [r3, #12]
}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001748:	429a      	cmp	r2, r3
 800174a:	d802      	bhi.n	8001752 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e001      	b.n	8001756 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001754:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	3b08      	subs	r3, #8
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001764:	fba2 2303 	umull	r2, r3, r2, r3
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001770:	089b      	lsrs	r3, r3, #2
 8001772:	009a      	lsls	r2, r3, #2
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4413      	add	r3, r2
 8001778:	461a      	mov	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001782:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 031f 	and.w	r3, r3, #31
 800178a:	2201      	movs	r2, #1
 800178c:	409a      	lsls	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001792:	bf00      	nop
 8001794:	371c      	adds	r7, #28
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40020407 	.word	0x40020407
 80017a4:	40020800 	.word	0x40020800
 80017a8:	40020820 	.word	0x40020820
 80017ac:	cccccccd 	.word	0xcccccccd
 80017b0:	40020880 	.word	0x40020880

080017b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	461a      	mov	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017d6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	2201      	movs	r2, #1
 80017e2:	409a      	lsls	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	1000823f 	.word	0x1000823f
 80017f8:	40020940 	.word	0x40020940

080017fc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e147      	b.n	8001a9e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d106      	bne.n	8001828 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7fe ff06 	bl	8000634 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699a      	ldr	r2, [r3, #24]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0210 	bic.w	r2, r2, #16
 8001836:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001838:	f7ff fc1a 	bl	8001070 <HAL_GetTick>
 800183c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800183e:	e012      	b.n	8001866 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001840:	f7ff fc16 	bl	8001070 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b0a      	cmp	r3, #10
 800184c:	d90b      	bls.n	8001866 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001852:	f043 0201 	orr.w	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2203      	movs	r2, #3
 800185e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e11b      	b.n	8001a9e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b08      	cmp	r3, #8
 8001872:	d0e5      	beq.n	8001840 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	699a      	ldr	r2, [r3, #24]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001884:	f7ff fbf4 	bl	8001070 <HAL_GetTick>
 8001888:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800188a:	e012      	b.n	80018b2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800188c:	f7ff fbf0 	bl	8001070 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b0a      	cmp	r3, #10
 8001898:	d90b      	bls.n	80018b2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189e:	f043 0201 	orr.w	r2, r3, #1
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2203      	movs	r2, #3
 80018aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e0f5      	b.n	8001a9e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0e5      	beq.n	800188c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	699a      	ldr	r2, [r3, #24]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0202 	orr.w	r2, r2, #2
 80018ce:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a74      	ldr	r2, [pc, #464]	; (8001aa8 <HAL_FDCAN_Init+0x2ac>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d103      	bne.n	80018e2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80018da:	4a74      	ldr	r2, [pc, #464]	; (8001aac <HAL_FDCAN_Init+0x2b0>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7c1b      	ldrb	r3, [r3, #16]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d108      	bne.n	80018fc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	699a      	ldr	r2, [r3, #24]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018f8:	619a      	str	r2, [r3, #24]
 80018fa:	e007      	b.n	800190c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699a      	ldr	r2, [r3, #24]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800190a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7c5b      	ldrb	r3, [r3, #17]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d108      	bne.n	8001926 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699a      	ldr	r2, [r3, #24]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001922:	619a      	str	r2, [r3, #24]
 8001924:	e007      	b.n	8001936 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699a      	ldr	r2, [r3, #24]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001934:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7c9b      	ldrb	r3, [r3, #18]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d108      	bne.n	8001950 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	699a      	ldr	r2, [r3, #24]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800194c:	619a      	str	r2, [r3, #24]
 800194e:	e007      	b.n	8001960 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	699a      	ldr	r2, [r3, #24]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800195e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	699a      	ldr	r2, [r3, #24]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001984:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 0210 	bic.w	r2, r2, #16
 8001994:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d108      	bne.n	80019b0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	699a      	ldr	r2, [r3, #24]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f042 0204 	orr.w	r2, r2, #4
 80019ac:	619a      	str	r2, [r3, #24]
 80019ae:	e02c      	b.n	8001a0a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d028      	beq.n	8001a0a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d01c      	beq.n	80019fa <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	699a      	ldr	r2, [r3, #24]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019ce:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	691a      	ldr	r2, [r3, #16]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0210 	orr.w	r2, r2, #16
 80019de:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d110      	bne.n	8001a0a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699a      	ldr	r2, [r3, #24]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0220 	orr.w	r2, r2, #32
 80019f6:	619a      	str	r2, [r3, #24]
 80019f8:	e007      	b.n	8001a0a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699a      	ldr	r2, [r3, #24]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 0220 	orr.w	r2, r2, #32
 8001a08:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a1a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a22:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a32:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a34:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a3e:	d115      	bne.n	8001a6c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a44:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a4e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	3b01      	subs	r3, #1
 8001a56:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001a58:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	3b01      	subs	r3, #1
 8001a62:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001a68:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a6a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f814 	bl	8001ab0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40006400 	.word	0x40006400
 8001aac:	40006500 	.word	0x40006500

08001ab0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001ab8:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001aba:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aca:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad2:	041a      	lsls	r2, r3, #16
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001af0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af8:	061a      	lsls	r2, r3, #24
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	e005      	b.n	8001b3e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d3f3      	bcc.n	8001b32 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	4000a400 	.word	0x4000a400

08001b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b6a:	e15a      	b.n	8001e22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2101      	movs	r1, #1
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	fa01 f303 	lsl.w	r3, r1, r3
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 814c 	beq.w	8001e1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d00b      	beq.n	8001ba4 <HAL_GPIO_Init+0x48>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d007      	beq.n	8001ba4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b98:	2b11      	cmp	r3, #17
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b12      	cmp	r3, #18
 8001ba2:	d130      	bne.n	8001c06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	2203      	movs	r2, #3
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bda:	2201      	movs	r2, #1
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	091b      	lsrs	r3, r3, #4
 8001bf0:	f003 0201 	and.w	r2, r3, #1
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	2203      	movs	r2, #3
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0xea>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b12      	cmp	r3, #18
 8001c44:	d123      	bne.n	8001c8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	08da      	lsrs	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3208      	adds	r2, #8
 8001c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	691a      	ldr	r2, [r3, #16]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	08da      	lsrs	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3208      	adds	r2, #8
 8001c88:	6939      	ldr	r1, [r7, #16]
 8001c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	2203      	movs	r2, #3
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 0203 	and.w	r2, r3, #3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 80a6 	beq.w	8001e1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd0:	4b5b      	ldr	r3, [pc, #364]	; (8001e40 <HAL_GPIO_Init+0x2e4>)
 8001cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd4:	4a5a      	ldr	r2, [pc, #360]	; (8001e40 <HAL_GPIO_Init+0x2e4>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6613      	str	r3, [r2, #96]	; 0x60
 8001cdc:	4b58      	ldr	r3, [pc, #352]	; (8001e40 <HAL_GPIO_Init+0x2e4>)
 8001cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce8:	4a56      	ldr	r2, [pc, #344]	; (8001e44 <HAL_GPIO_Init+0x2e8>)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	220f      	movs	r2, #15
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d12:	d01f      	beq.n	8001d54 <HAL_GPIO_Init+0x1f8>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a4c      	ldr	r2, [pc, #304]	; (8001e48 <HAL_GPIO_Init+0x2ec>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d019      	beq.n	8001d50 <HAL_GPIO_Init+0x1f4>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a4b      	ldr	r2, [pc, #300]	; (8001e4c <HAL_GPIO_Init+0x2f0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d013      	beq.n	8001d4c <HAL_GPIO_Init+0x1f0>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a4a      	ldr	r2, [pc, #296]	; (8001e50 <HAL_GPIO_Init+0x2f4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d00d      	beq.n	8001d48 <HAL_GPIO_Init+0x1ec>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a49      	ldr	r2, [pc, #292]	; (8001e54 <HAL_GPIO_Init+0x2f8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d007      	beq.n	8001d44 <HAL_GPIO_Init+0x1e8>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a48      	ldr	r2, [pc, #288]	; (8001e58 <HAL_GPIO_Init+0x2fc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d101      	bne.n	8001d40 <HAL_GPIO_Init+0x1e4>
 8001d3c:	2305      	movs	r3, #5
 8001d3e:	e00a      	b.n	8001d56 <HAL_GPIO_Init+0x1fa>
 8001d40:	2306      	movs	r3, #6
 8001d42:	e008      	b.n	8001d56 <HAL_GPIO_Init+0x1fa>
 8001d44:	2304      	movs	r3, #4
 8001d46:	e006      	b.n	8001d56 <HAL_GPIO_Init+0x1fa>
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e004      	b.n	8001d56 <HAL_GPIO_Init+0x1fa>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e002      	b.n	8001d56 <HAL_GPIO_Init+0x1fa>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <HAL_GPIO_Init+0x1fa>
 8001d54:	2300      	movs	r3, #0
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	f002 0203 	and.w	r2, r2, #3
 8001d5c:	0092      	lsls	r2, r2, #2
 8001d5e:	4093      	lsls	r3, r2
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d66:	4937      	ldr	r1, [pc, #220]	; (8001e44 <HAL_GPIO_Init+0x2e8>)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d74:	4b39      	ldr	r3, [pc, #228]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d98:	4a30      	ldr	r2, [pc, #192]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d9e:	4b2f      	ldr	r3, [pc, #188]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dc2:	4a26      	ldr	r2, [pc, #152]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dc8:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dec:	4a1b      	ldr	r2, [pc, #108]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001df2:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e16:	4a11      	ldr	r2, [pc, #68]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f47f ae9d 	bne.w	8001b6c <HAL_GPIO_Init+0x10>
  }
}
 8001e32:	bf00      	nop
 8001e34:	371c      	adds	r7, #28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40010000 	.word	0x40010000
 8001e48:	48000400 	.word	0x48000400
 8001e4c:	48000800 	.word	0x48000800
 8001e50:	48000c00 	.word	0x48000c00
 8001e54:	48001000 	.word	0x48001000
 8001e58:	48001400 	.word	0x48001400
 8001e5c:	40010400 	.word	0x40010400

08001e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	807b      	strh	r3, [r7, #2]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e70:	787b      	ldrb	r3, [r7, #1]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e76:	887a      	ldrh	r2, [r7, #2]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e7c:	e002      	b.n	8001e84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d141      	bne.n	8001f22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e9e:	4b4b      	ldr	r3, [pc, #300]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eaa:	d131      	bne.n	8001f10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001eac:	4b47      	ldr	r3, [pc, #284]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eb2:	4a46      	ldr	r2, [pc, #280]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ebc:	4b43      	ldr	r3, [pc, #268]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ec4:	4a41      	ldr	r2, [pc, #260]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ecc:	4b40      	ldr	r3, [pc, #256]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2232      	movs	r2, #50	; 0x32
 8001ed2:	fb02 f303 	mul.w	r3, r2, r3
 8001ed6:	4a3f      	ldr	r2, [pc, #252]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	0c9b      	lsrs	r3, r3, #18
 8001ede:	3301      	adds	r3, #1
 8001ee0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ee2:	e002      	b.n	8001eea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eea:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef6:	d102      	bne.n	8001efe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f2      	bne.n	8001ee4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001efe:	4b33      	ldr	r3, [pc, #204]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0a:	d158      	bne.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e057      	b.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f10:	4b2e      	ldr	r3, [pc, #184]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f16:	4a2d      	ldr	r2, [pc, #180]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f20:	e04d      	b.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f28:	d141      	bne.n	8001fae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f36:	d131      	bne.n	8001f9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f38:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f3e:	4a23      	ldr	r2, [pc, #140]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f48:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f50:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f58:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2232      	movs	r2, #50	; 0x32
 8001f5e:	fb02 f303 	mul.w	r3, r2, r3
 8001f62:	4a1c      	ldr	r2, [pc, #112]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	0c9b      	lsrs	r3, r3, #18
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f6e:	e002      	b.n	8001f76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f82:	d102      	bne.n	8001f8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f2      	bne.n	8001f70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f96:	d112      	bne.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e011      	b.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fac:	e007      	b.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fbc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	431bde83 	.word	0x431bde83

08001fd8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe6:	6093      	str	r3, [r2, #8]
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40007000 	.word	0x40007000

08001ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e308      	b.n	800261c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d075      	beq.n	8002102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002016:	4ba3      	ldr	r3, [pc, #652]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002020:	4ba0      	ldr	r3, [pc, #640]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	2b0c      	cmp	r3, #12
 800202e:	d102      	bne.n	8002036 <HAL_RCC_OscConfig+0x3e>
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b03      	cmp	r3, #3
 8002034:	d002      	beq.n	800203c <HAL_RCC_OscConfig+0x44>
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b08      	cmp	r3, #8
 800203a:	d10b      	bne.n	8002054 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203c:	4b99      	ldr	r3, [pc, #612]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d05b      	beq.n	8002100 <HAL_RCC_OscConfig+0x108>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d157      	bne.n	8002100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e2e3      	b.n	800261c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205c:	d106      	bne.n	800206c <HAL_RCC_OscConfig+0x74>
 800205e:	4b91      	ldr	r3, [pc, #580]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a90      	ldr	r2, [pc, #576]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e01d      	b.n	80020a8 <HAL_RCC_OscConfig+0xb0>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x98>
 8002076:	4b8b      	ldr	r3, [pc, #556]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a8a      	ldr	r2, [pc, #552]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 800207c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b88      	ldr	r3, [pc, #544]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a87      	ldr	r2, [pc, #540]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0xb0>
 8002090:	4b84      	ldr	r3, [pc, #528]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a83      	ldr	r2, [pc, #524]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 8002096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b81      	ldr	r3, [pc, #516]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a80      	ldr	r2, [pc, #512]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 80020a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d013      	beq.n	80020d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7fe ffde 	bl	8001070 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7fe ffda 	bl	8001070 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	; 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e2a8      	b.n	800261c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ca:	4b76      	ldr	r3, [pc, #472]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0xc0>
 80020d6:	e014      	b.n	8002102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7fe ffca 	bl	8001070 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e0:	f7fe ffc6 	bl	8001070 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	; 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e294      	b.n	800261c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020f2:	4b6c      	ldr	r3, [pc, #432]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0xe8>
 80020fe:	e000      	b.n	8002102 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d075      	beq.n	80021fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800210e:	4b65      	ldr	r3, [pc, #404]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002118:	4b62      	ldr	r3, [pc, #392]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	2b0c      	cmp	r3, #12
 8002126:	d102      	bne.n	800212e <HAL_RCC_OscConfig+0x136>
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d002      	beq.n	8002134 <HAL_RCC_OscConfig+0x13c>
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b04      	cmp	r3, #4
 8002132:	d11f      	bne.n	8002174 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002134:	4b5b      	ldr	r3, [pc, #364]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_OscConfig+0x154>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e267      	b.n	800261c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214c:	4b55      	ldr	r3, [pc, #340]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	061b      	lsls	r3, r3, #24
 800215a:	4952      	ldr	r1, [pc, #328]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002160:	4b51      	ldr	r3, [pc, #324]	; (80022a8 <HAL_RCC_OscConfig+0x2b0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fbd9 	bl	800091c <HAL_InitTick>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d043      	beq.n	80021f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e253      	b.n	800261c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d023      	beq.n	80021c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800217c:	4b49      	ldr	r3, [pc, #292]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a48      	ldr	r2, [pc, #288]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 8002182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7fe ff72 	bl	8001070 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002190:	f7fe ff6e 	bl	8001070 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e23c      	b.n	800261c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a2:	4b40      	ldr	r3, [pc, #256]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ae:	4b3d      	ldr	r3, [pc, #244]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	061b      	lsls	r3, r3, #24
 80021bc:	4939      	ldr	r1, [pc, #228]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
 80021c2:	e01a      	b.n	80021fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c4:	4b37      	ldr	r3, [pc, #220]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a36      	ldr	r2, [pc, #216]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 80021ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe ff4e 	bl	8001070 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d8:	f7fe ff4a 	bl	8001070 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e218      	b.n	800261c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ea:	4b2e      	ldr	r3, [pc, #184]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x1e0>
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d03c      	beq.n	8002280 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d01c      	beq.n	8002248 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220e:	4b25      	ldr	r3, [pc, #148]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002214:	4a23      	ldr	r2, [pc, #140]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221e:	f7fe ff27 	bl	8001070 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002226:	f7fe ff23 	bl	8001070 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e1f1      	b.n	800261c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002238:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 800223a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0ef      	beq.n	8002226 <HAL_RCC_OscConfig+0x22e>
 8002246:	e01b      	b.n	8002280 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002248:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 800224a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224e:	4a15      	ldr	r2, [pc, #84]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7fe ff0a 	bl	8001070 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002260:	f7fe ff06 	bl	8001070 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1d4      	b.n	800261c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 8002274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1ef      	bne.n	8002260 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80ab 	beq.w	80023e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d106      	bne.n	80022ac <HAL_RCC_OscConfig+0x2b4>
 800229e:	2301      	movs	r3, #1
 80022a0:	e005      	b.n	80022ae <HAL_RCC_OscConfig+0x2b6>
 80022a2:	bf00      	nop
 80022a4:	40021000 	.word	0x40021000
 80022a8:	20000004 	.word	0x20000004
 80022ac:	2300      	movs	r3, #0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00d      	beq.n	80022ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	4baf      	ldr	r3, [pc, #700]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	4aae      	ldr	r2, [pc, #696]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022bc:	6593      	str	r3, [r2, #88]	; 0x58
 80022be:	4bac      	ldr	r3, [pc, #688]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022ca:	2301      	movs	r3, #1
 80022cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ce:	4ba9      	ldr	r3, [pc, #676]	; (8002574 <HAL_RCC_OscConfig+0x57c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d118      	bne.n	800230c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022da:	4ba6      	ldr	r3, [pc, #664]	; (8002574 <HAL_RCC_OscConfig+0x57c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4aa5      	ldr	r2, [pc, #660]	; (8002574 <HAL_RCC_OscConfig+0x57c>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e6:	f7fe fec3 	bl	8001070 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ee:	f7fe febf 	bl	8001070 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e18d      	b.n	800261c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002300:	4b9c      	ldr	r3, [pc, #624]	; (8002574 <HAL_RCC_OscConfig+0x57c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d108      	bne.n	8002326 <HAL_RCC_OscConfig+0x32e>
 8002314:	4b96      	ldr	r3, [pc, #600]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231a:	4a95      	ldr	r2, [pc, #596]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002324:	e024      	b.n	8002370 <HAL_RCC_OscConfig+0x378>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b05      	cmp	r3, #5
 800232c:	d110      	bne.n	8002350 <HAL_RCC_OscConfig+0x358>
 800232e:	4b90      	ldr	r3, [pc, #576]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002334:	4a8e      	ldr	r2, [pc, #568]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002336:	f043 0304 	orr.w	r3, r3, #4
 800233a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800233e:	4b8c      	ldr	r3, [pc, #560]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002344:	4a8a      	ldr	r2, [pc, #552]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800234e:	e00f      	b.n	8002370 <HAL_RCC_OscConfig+0x378>
 8002350:	4b87      	ldr	r3, [pc, #540]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002356:	4a86      	ldr	r2, [pc, #536]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002360:	4b83      	ldr	r3, [pc, #524]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002366:	4a82      	ldr	r2, [pc, #520]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002368:	f023 0304 	bic.w	r3, r3, #4
 800236c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d016      	beq.n	80023a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7fe fe7a 	bl	8001070 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800237e:	e00a      	b.n	8002396 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002380:	f7fe fe76 	bl	8001070 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	; 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e142      	b.n	800261c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002396:	4b76      	ldr	r3, [pc, #472]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0ed      	beq.n	8002380 <HAL_RCC_OscConfig+0x388>
 80023a4:	e015      	b.n	80023d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a6:	f7fe fe63 	bl	8001070 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7fe fe5f 	bl	8001070 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e12b      	b.n	800261c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023c4:	4b6a      	ldr	r3, [pc, #424]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1ed      	bne.n	80023ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023d2:	7ffb      	ldrb	r3, [r7, #31]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d8:	4b65      	ldr	r3, [pc, #404]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80023da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023dc:	4a64      	ldr	r2, [pc, #400]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80023de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d03c      	beq.n	800246a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01c      	beq.n	8002432 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023f8:	4b5d      	ldr	r3, [pc, #372]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80023fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023fe:	4a5c      	ldr	r2, [pc, #368]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002408:	f7fe fe32 	bl	8001070 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002410:	f7fe fe2e 	bl	8001070 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e0fc      	b.n	800261c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002422:	4b53      	ldr	r3, [pc, #332]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002424:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0ef      	beq.n	8002410 <HAL_RCC_OscConfig+0x418>
 8002430:	e01b      	b.n	800246a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002432:	4b4f      	ldr	r3, [pc, #316]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002434:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002438:	4a4d      	ldr	r2, [pc, #308]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 800243a:	f023 0301 	bic.w	r3, r3, #1
 800243e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002442:	f7fe fe15 	bl	8001070 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800244a:	f7fe fe11 	bl	8001070 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e0df      	b.n	800261c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800245c:	4b44      	ldr	r3, [pc, #272]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 800245e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1ef      	bne.n	800244a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80d3 	beq.w	800261a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002474:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b0c      	cmp	r3, #12
 800247e:	f000 808d 	beq.w	800259c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d15a      	bne.n	8002540 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248a:	4b39      	ldr	r3, [pc, #228]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a38      	ldr	r2, [pc, #224]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002490:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7fe fdeb 	bl	8001070 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249e:	f7fe fde7 	bl	8001070 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0b5      	b.n	800261c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b0:	4b2f      	ldr	r3, [pc, #188]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f0      	bne.n	800249e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024bc:	4b2c      	ldr	r3, [pc, #176]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <HAL_RCC_OscConfig+0x580>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6a11      	ldr	r1, [r2, #32]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024cc:	3a01      	subs	r2, #1
 80024ce:	0112      	lsls	r2, r2, #4
 80024d0:	4311      	orrs	r1, r2
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80024d6:	0212      	lsls	r2, r2, #8
 80024d8:	4311      	orrs	r1, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024de:	0852      	lsrs	r2, r2, #1
 80024e0:	3a01      	subs	r2, #1
 80024e2:	0552      	lsls	r2, r2, #21
 80024e4:	4311      	orrs	r1, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024ea:	0852      	lsrs	r2, r2, #1
 80024ec:	3a01      	subs	r2, #1
 80024ee:	0652      	lsls	r2, r2, #25
 80024f0:	4311      	orrs	r1, r2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024f6:	06d2      	lsls	r2, r2, #27
 80024f8:	430a      	orrs	r2, r1
 80024fa:	491d      	ldr	r1, [pc, #116]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002500:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1a      	ldr	r2, [pc, #104]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800250a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800250c:	4b18      	ldr	r3, [pc, #96]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4a17      	ldr	r2, [pc, #92]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002516:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe fdaa 	bl	8001070 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe fda6 	bl	8001070 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e074      	b.n	800261c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002532:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0x528>
 800253e:	e06c      	b.n	800261a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800254a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800254c:	4b08      	ldr	r3, [pc, #32]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4a07      	ldr	r2, [pc, #28]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002552:	f023 0303 	bic.w	r3, r3, #3
 8002556:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 800255e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002566:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7fe fd82 	bl	8001070 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800256e:	e00e      	b.n	800258e <HAL_RCC_OscConfig+0x596>
 8002570:	40021000 	.word	0x40021000
 8002574:	40007000 	.word	0x40007000
 8002578:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257c:	f7fe fd78 	bl	8001070 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e046      	b.n	800261c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800258e:	4b25      	ldr	r3, [pc, #148]	; (8002624 <HAL_RCC_OscConfig+0x62c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x584>
 800259a:	e03e      	b.n	800261a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e039      	b.n	800261c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80025a8:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <HAL_RCC_OscConfig+0x62c>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f003 0203 	and.w	r2, r3, #3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d12c      	bne.n	8002616 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	3b01      	subs	r3, #1
 80025c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d123      	bne.n	8002616 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d11b      	bne.n	8002616 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d113      	bne.n	8002616 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	085b      	lsrs	r3, r3, #1
 80025fa:	3b01      	subs	r3, #1
 80025fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d109      	bne.n	8002616 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260c:	085b      	lsrs	r3, r3, #1
 800260e:	3b01      	subs	r3, #1
 8002610:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002612:	429a      	cmp	r2, r3
 8002614:	d001      	beq.n	800261a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3720      	adds	r7, #32
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000

08002628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e11e      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002640:	4b91      	ldr	r3, [pc, #580]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d910      	bls.n	8002670 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b8e      	ldr	r3, [pc, #568]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 020f 	bic.w	r2, r3, #15
 8002656:	498c      	ldr	r1, [pc, #560]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b8a      	ldr	r3, [pc, #552]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e106      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d073      	beq.n	8002764 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d129      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002684:	4b81      	ldr	r3, [pc, #516]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0f4      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002694:	f000 f9d0 	bl	8002a38 <RCC_GetSysClockFreqFromPLLSource>
 8002698:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4a7c      	ldr	r2, [pc, #496]	; (8002890 <HAL_RCC_ClockConfig+0x268>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d93f      	bls.n	8002722 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026a2:	4b7a      	ldr	r3, [pc, #488]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d009      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d033      	beq.n	8002722 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d12f      	bne.n	8002722 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026c2:	4b72      	ldr	r3, [pc, #456]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ca:	4a70      	ldr	r2, [pc, #448]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 80026cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	e024      	b.n	8002722 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d107      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e0:	4b6a      	ldr	r3, [pc, #424]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d109      	bne.n	8002700 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0c6      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f0:	4b66      	ldr	r3, [pc, #408]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0be      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002700:	f000 f8ce 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8002704:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4a61      	ldr	r2, [pc, #388]	; (8002890 <HAL_RCC_ClockConfig+0x268>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d909      	bls.n	8002722 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800270e:	4b5f      	ldr	r3, [pc, #380]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002716:	4a5d      	ldr	r2, [pc, #372]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 8002718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800271c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002722:	4b5a      	ldr	r3, [pc, #360]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f023 0203 	bic.w	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4957      	ldr	r1, [pc, #348]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 8002730:	4313      	orrs	r3, r2
 8002732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002734:	f7fe fc9c 	bl	8001070 <HAL_GetTick>
 8002738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	e00a      	b.n	8002752 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800273c:	f7fe fc98 	bl	8001070 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f241 3288 	movw	r2, #5000	; 0x1388
 800274a:	4293      	cmp	r3, r2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e095      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	4b4e      	ldr	r3, [pc, #312]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 020c 	and.w	r2, r3, #12
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	429a      	cmp	r2, r3
 8002762:	d1eb      	bne.n	800273c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d023      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800277c:	4b43      	ldr	r3, [pc, #268]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a42      	ldr	r2, [pc, #264]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 8002782:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002786:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d007      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002794:	4b3d      	ldr	r3, [pc, #244]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800279c:	4a3b      	ldr	r2, [pc, #236]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 800279e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a4:	4b39      	ldr	r3, [pc, #228]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	4936      	ldr	r1, [pc, #216]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
 80027b6:	e008      	b.n	80027ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b80      	cmp	r3, #128	; 0x80
 80027bc:	d105      	bne.n	80027ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027be:	4b33      	ldr	r3, [pc, #204]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	4a32      	ldr	r2, [pc, #200]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 80027c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027ca:	4b2f      	ldr	r3, [pc, #188]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d21d      	bcs.n	8002814 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d8:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f023 020f 	bic.w	r2, r3, #15
 80027e0:	4929      	ldr	r1, [pc, #164]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027e8:	f7fe fc42 	bl	8001070 <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	f7fe fc3e 	bl	8001070 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e03b      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b20      	ldr	r3, [pc, #128]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d1ed      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002820:	4b1a      	ldr	r3, [pc, #104]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4917      	ldr	r1, [pc, #92]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800283e:	4b13      	ldr	r3, [pc, #76]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	490f      	ldr	r1, [pc, #60]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002852:	f000 f825 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8002856:	4601      	mov	r1, r0
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <HAL_RCC_ClockConfig+0x26c>)
 8002864:	5cd3      	ldrb	r3, [r2, r3]
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	fa21 f303 	lsr.w	r3, r1, r3
 800286e:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <HAL_RCC_ClockConfig+0x270>)
 8002870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <HAL_RCC_ClockConfig+0x274>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe f850 	bl	800091c <HAL_InitTick>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40022000 	.word	0x40022000
 800288c:	40021000 	.word	0x40021000
 8002890:	04c4b400 	.word	0x04c4b400
 8002894:	0800722c 	.word	0x0800722c
 8002898:	20000000 	.word	0x20000000
 800289c:	20000004 	.word	0x20000004

080028a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028a6:	4b2c      	ldr	r3, [pc, #176]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d102      	bne.n	80028b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028b2:	4b2a      	ldr	r3, [pc, #168]	; (800295c <HAL_RCC_GetSysClockFreq+0xbc>)
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	e047      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028b8:	4b27      	ldr	r3, [pc, #156]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d102      	bne.n	80028ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028c4:	4b26      	ldr	r3, [pc, #152]	; (8002960 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	e03e      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028ca:	4b23      	ldr	r3, [pc, #140]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b0c      	cmp	r3, #12
 80028d4:	d136      	bne.n	8002944 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028d6:	4b20      	ldr	r3, [pc, #128]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	3301      	adds	r3, #1
 80028ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d10c      	bne.n	800290e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028f4:	4a1a      	ldr	r2, [pc, #104]	; (8002960 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	4a16      	ldr	r2, [pc, #88]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028fe:	68d2      	ldr	r2, [r2, #12]
 8002900:	0a12      	lsrs	r2, r2, #8
 8002902:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	617b      	str	r3, [r7, #20]
      break;
 800290c:	e00c      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800290e:	4a13      	ldr	r2, [pc, #76]	; (800295c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	4a10      	ldr	r2, [pc, #64]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002918:	68d2      	ldr	r2, [r2, #12]
 800291a:	0a12      	lsrs	r2, r2, #8
 800291c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002920:	fb02 f303 	mul.w	r3, r2, r3
 8002924:	617b      	str	r3, [r7, #20]
      break;
 8002926:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	0e5b      	lsrs	r3, r3, #25
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	3301      	adds	r3, #1
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	e001      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002948:	693b      	ldr	r3, [r7, #16]
}
 800294a:	4618      	mov	r0, r3
 800294c:	371c      	adds	r7, #28
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	00f42400 	.word	0x00f42400
 8002960:	016e3600 	.word	0x016e3600

08002964 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <HAL_RCC_GetHCLKFreq+0x14>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000000 	.word	0x20000000

0800297c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002980:	f7ff fff0 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 8002984:	4601      	mov	r1, r0
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002992:	5cd3      	ldrb	r3, [r2, r3]
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	fa21 f303 	lsr.w	r3, r1, r3
}
 800299c:	4618      	mov	r0, r3
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	0800723c 	.word	0x0800723c

080029a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029ac:	f7ff ffda 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 80029b0:	4601      	mov	r1, r0
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	0adb      	lsrs	r3, r3, #11
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029be:	5cd3      	ldrb	r3, [r2, r3]
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40021000 	.word	0x40021000
 80029d0:	0800723c 	.word	0x0800723c

080029d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	220f      	movs	r2, #15
 80029e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_RCC_GetClockConfig+0x5c>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0203 	and.w	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <HAL_RCC_GetClockConfig+0x5c>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <HAL_RCC_GetClockConfig+0x5c>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_RCC_GetClockConfig+0x5c>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	08db      	lsrs	r3, r3, #3
 8002a0e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002a16:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <HAL_RCC_GetClockConfig+0x60>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 020f 	and.w	r2, r3, #15
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	601a      	str	r2, [r3, #0]
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40022000 	.word	0x40022000

08002a38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a48:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	3301      	adds	r3, #1
 8002a54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d10c      	bne.n	8002a76 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a5c:	4a17      	ldr	r2, [pc, #92]	; (8002abc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a64:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a66:	68d2      	ldr	r2, [r2, #12]
 8002a68:	0a12      	lsrs	r2, r2, #8
 8002a6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	617b      	str	r3, [r7, #20]
    break;
 8002a74:	e00c      	b.n	8002a90 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a76:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7e:	4a0e      	ldr	r2, [pc, #56]	; (8002ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a80:	68d2      	ldr	r2, [r2, #12]
 8002a82:	0a12      	lsrs	r2, r2, #8
 8002a84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a88:	fb02 f303 	mul.w	r3, r2, r3
 8002a8c:	617b      	str	r3, [r7, #20]
    break;
 8002a8e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a90:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	0e5b      	lsrs	r3, r3, #25
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002aaa:	687b      	ldr	r3, [r7, #4]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	016e3600 	.word	0x016e3600
 8002ac0:	00f42400 	.word	0x00f42400

08002ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002acc:	2300      	movs	r3, #0
 8002ace:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8098 	beq.w	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae6:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10d      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	4b40      	ldr	r3, [pc, #256]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	4a3f      	ldr	r2, [pc, #252]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afc:	6593      	str	r3, [r2, #88]	; 0x58
 8002afe:	4b3d      	ldr	r3, [pc, #244]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b0e:	4b3a      	ldr	r3, [pc, #232]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a39      	ldr	r2, [pc, #228]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b1a:	f7fe faa9 	bl	8001070 <HAL_GetTick>
 8002b1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b20:	e009      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b22:	f7fe faa5 	bl	8001070 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d902      	bls.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	74fb      	strb	r3, [r7, #19]
        break;
 8002b34:	e005      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b36:	4b30      	ldr	r3, [pc, #192]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0ef      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002b42:	7cfb      	ldrb	r3, [r7, #19]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d159      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b48:	4b2a      	ldr	r3, [pc, #168]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d01e      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d019      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b64:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b70:	4b20      	ldr	r3, [pc, #128]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b76:	4a1f      	ldr	r2, [pc, #124]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b80:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	4a1b      	ldr	r2, [pc, #108]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b90:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d016      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7fe fa65 	bl	8001070 <HAL_GetTick>
 8002ba6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba8:	e00b      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002baa:	f7fe fa61 	bl	8001070 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d902      	bls.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	74fb      	strb	r3, [r7, #19]
            break;
 8002bc0:	e006      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0ec      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002bd0:	7cfb      	ldrb	r3, [r7, #19]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10b      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bd6:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	4903      	ldr	r1, [pc, #12]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bec:	e008      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bee:	7cfb      	ldrb	r3, [r7, #19]
 8002bf0:	74bb      	strb	r3, [r7, #18]
 8002bf2:	e005      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bfc:	7cfb      	ldrb	r3, [r7, #19]
 8002bfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c00:	7c7b      	ldrb	r3, [r7, #17]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d105      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c06:	4ba6      	ldr	r3, [pc, #664]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0a:	4aa5      	ldr	r2, [pc, #660]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c1e:	4ba0      	ldr	r3, [pc, #640]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c24:	f023 0203 	bic.w	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	499c      	ldr	r1, [pc, #624]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c40:	4b97      	ldr	r3, [pc, #604]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c46:	f023 020c 	bic.w	r2, r3, #12
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	4994      	ldr	r1, [pc, #592]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c62:	4b8f      	ldr	r3, [pc, #572]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	498b      	ldr	r1, [pc, #556]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c84:	4b86      	ldr	r3, [pc, #536]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	4983      	ldr	r1, [pc, #524]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ca6:	4b7e      	ldr	r3, [pc, #504]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	497a      	ldr	r1, [pc, #488]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cc8:	4b75      	ldr	r3, [pc, #468]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	4972      	ldr	r1, [pc, #456]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cea:	4b6d      	ldr	r3, [pc, #436]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	4969      	ldr	r1, [pc, #420]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d0c:	4b64      	ldr	r3, [pc, #400]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	4961      	ldr	r1, [pc, #388]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d2e:	4b5c      	ldr	r3, [pc, #368]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	4958      	ldr	r1, [pc, #352]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d015      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d50:	4b53      	ldr	r3, [pc, #332]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	4950      	ldr	r1, [pc, #320]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d6e:	d105      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d70:	4b4b      	ldr	r3, [pc, #300]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a4a      	ldr	r2, [pc, #296]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d015      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d88:	4b45      	ldr	r3, [pc, #276]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	4942      	ldr	r1, [pc, #264]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002da6:	d105      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da8:	4b3d      	ldr	r3, [pc, #244]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4a3c      	ldr	r2, [pc, #240]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002db2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d015      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002dc0:	4b37      	ldr	r3, [pc, #220]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	4934      	ldr	r1, [pc, #208]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dde:	d105      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002de0:	4b2f      	ldr	r3, [pc, #188]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a2e      	ldr	r2, [pc, #184]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d015      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002df8:	4b29      	ldr	r3, [pc, #164]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e06:	4926      	ldr	r1, [pc, #152]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e16:	d105      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e18:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4a20      	ldr	r2, [pc, #128]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d015      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e30:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	4918      	ldr	r1, [pc, #96]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e4e:	d105      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e50:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4a12      	ldr	r2, [pc, #72]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d015      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e68:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e76:	490a      	ldr	r1, [pc, #40]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e86:	d105      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4a04      	ldr	r2, [pc, #16]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002e94:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000

08002ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e049      	b.n	8002f4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f841 	bl	8002f52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3304      	adds	r3, #4
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	f000 fa52 	bl	800338c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d001      	beq.n	8002f80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e04a      	b.n	8003016 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a21      	ldr	r2, [pc, #132]	; (8003024 <HAL_TIM_Base_Start_IT+0xbc>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d018      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002faa:	d013      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <HAL_TIM_Base_Start_IT+0xc0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00e      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1c      	ldr	r2, [pc, #112]	; (800302c <HAL_TIM_Base_Start_IT+0xc4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d009      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1a      	ldr	r2, [pc, #104]	; (8003030 <HAL_TIM_Base_Start_IT+0xc8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d004      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a19      	ldr	r2, [pc, #100]	; (8003034 <HAL_TIM_Base_Start_IT+0xcc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d115      	bne.n	8003000 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	4b17      	ldr	r3, [pc, #92]	; (8003038 <HAL_TIM_Base_Start_IT+0xd0>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b06      	cmp	r3, #6
 8002fe4:	d015      	beq.n	8003012 <HAL_TIM_Base_Start_IT+0xaa>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fec:	d011      	beq.n	8003012 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0201 	orr.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffe:	e008      	b.n	8003012 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	e000      	b.n	8003014 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003012:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40012c00 	.word	0x40012c00
 8003028:	40000400 	.word	0x40000400
 800302c:	40000800 	.word	0x40000800
 8003030:	40013400 	.word	0x40013400
 8003034:	40014000 	.word	0x40014000
 8003038:	00010007 	.word	0x00010007

0800303c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b02      	cmp	r3, #2
 8003050:	d122      	bne.n	8003098 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b02      	cmp	r3, #2
 800305e:	d11b      	bne.n	8003098 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0202 	mvn.w	r2, #2
 8003068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f965 	bl	800334e <HAL_TIM_IC_CaptureCallback>
 8003084:	e005      	b.n	8003092 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f957 	bl	800333a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f968 	bl	8003362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d122      	bne.n	80030ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d11b      	bne.n	80030ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0204 	mvn.w	r2, #4
 80030bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2202      	movs	r2, #2
 80030c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f93b 	bl	800334e <HAL_TIM_IC_CaptureCallback>
 80030d8:	e005      	b.n	80030e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f92d 	bl	800333a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f93e 	bl	8003362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d122      	bne.n	8003140 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b08      	cmp	r3, #8
 8003106:	d11b      	bne.n	8003140 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0208 	mvn.w	r2, #8
 8003110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2204      	movs	r2, #4
 8003116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f911 	bl	800334e <HAL_TIM_IC_CaptureCallback>
 800312c:	e005      	b.n	800313a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f903 	bl	800333a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f914 	bl	8003362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	2b10      	cmp	r3, #16
 800314c:	d122      	bne.n	8003194 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b10      	cmp	r3, #16
 800315a:	d11b      	bne.n	8003194 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0210 	mvn.w	r2, #16
 8003164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2208      	movs	r2, #8
 800316a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f8e7 	bl	800334e <HAL_TIM_IC_CaptureCallback>
 8003180:	e005      	b.n	800318e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f8d9 	bl	800333a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f8ea 	bl	8003362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d10e      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d107      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0201 	mvn.w	r2, #1
 80031b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fd fb70 	bl	80008a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ca:	2b80      	cmp	r3, #128	; 0x80
 80031cc:	d10e      	bne.n	80031ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d8:	2b80      	cmp	r3, #128	; 0x80
 80031da:	d107      	bne.n	80031ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f96a 	bl	80034c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fa:	d10e      	bne.n	800321a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003206:	2b80      	cmp	r3, #128	; 0x80
 8003208:	d107      	bne.n	800321a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f95d 	bl	80034d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003224:	2b40      	cmp	r3, #64	; 0x40
 8003226:	d10e      	bne.n	8003246 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b40      	cmp	r3, #64	; 0x40
 8003234:	d107      	bne.n	8003246 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800323e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f898 	bl	8003376 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b20      	cmp	r3, #32
 8003252:	d10e      	bne.n	8003272 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b20      	cmp	r3, #32
 8003260:	d107      	bne.n	8003272 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f06f 0220 	mvn.w	r2, #32
 800326a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f91d 	bl	80034ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800327c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003280:	d10f      	bne.n	80032a2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800328c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003290:	d107      	bne.n	80032a2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800329a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f923 	bl	80034e8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032b0:	d10f      	bne.n	80032d2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032c0:	d107      	bne.n	80032d2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80032ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f915 	bl	80034fc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e0:	d10f      	bne.n	8003302 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032f0:	d107      	bne.n	8003302 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80032fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f907 	bl	8003510 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800330c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003310:	d10f      	bne.n	8003332 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800331c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003320:	d107      	bne.n	8003332 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800332a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f8f9 	bl	8003524 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a3c      	ldr	r2, [pc, #240]	; (8003490 <TIM_Base_SetConfig+0x104>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00f      	beq.n	80033c4 <TIM_Base_SetConfig+0x38>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033aa:	d00b      	beq.n	80033c4 <TIM_Base_SetConfig+0x38>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a39      	ldr	r2, [pc, #228]	; (8003494 <TIM_Base_SetConfig+0x108>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d007      	beq.n	80033c4 <TIM_Base_SetConfig+0x38>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a38      	ldr	r2, [pc, #224]	; (8003498 <TIM_Base_SetConfig+0x10c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d003      	beq.n	80033c4 <TIM_Base_SetConfig+0x38>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a37      	ldr	r2, [pc, #220]	; (800349c <TIM_Base_SetConfig+0x110>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d108      	bne.n	80033d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a2d      	ldr	r2, [pc, #180]	; (8003490 <TIM_Base_SetConfig+0x104>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d01b      	beq.n	8003416 <TIM_Base_SetConfig+0x8a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e4:	d017      	beq.n	8003416 <TIM_Base_SetConfig+0x8a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a2a      	ldr	r2, [pc, #168]	; (8003494 <TIM_Base_SetConfig+0x108>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d013      	beq.n	8003416 <TIM_Base_SetConfig+0x8a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a29      	ldr	r2, [pc, #164]	; (8003498 <TIM_Base_SetConfig+0x10c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00f      	beq.n	8003416 <TIM_Base_SetConfig+0x8a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a28      	ldr	r2, [pc, #160]	; (800349c <TIM_Base_SetConfig+0x110>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00b      	beq.n	8003416 <TIM_Base_SetConfig+0x8a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a27      	ldr	r2, [pc, #156]	; (80034a0 <TIM_Base_SetConfig+0x114>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d007      	beq.n	8003416 <TIM_Base_SetConfig+0x8a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a26      	ldr	r2, [pc, #152]	; (80034a4 <TIM_Base_SetConfig+0x118>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d003      	beq.n	8003416 <TIM_Base_SetConfig+0x8a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a25      	ldr	r2, [pc, #148]	; (80034a8 <TIM_Base_SetConfig+0x11c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d108      	bne.n	8003428 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800341c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a10      	ldr	r2, [pc, #64]	; (8003490 <TIM_Base_SetConfig+0x104>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d00f      	beq.n	8003474 <TIM_Base_SetConfig+0xe8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a11      	ldr	r2, [pc, #68]	; (800349c <TIM_Base_SetConfig+0x110>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00b      	beq.n	8003474 <TIM_Base_SetConfig+0xe8>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a10      	ldr	r2, [pc, #64]	; (80034a0 <TIM_Base_SetConfig+0x114>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d007      	beq.n	8003474 <TIM_Base_SetConfig+0xe8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a0f      	ldr	r2, [pc, #60]	; (80034a4 <TIM_Base_SetConfig+0x118>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d003      	beq.n	8003474 <TIM_Base_SetConfig+0xe8>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a0e      	ldr	r2, [pc, #56]	; (80034a8 <TIM_Base_SetConfig+0x11c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d103      	bne.n	800347c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	615a      	str	r2, [r3, #20]
}
 8003482:	bf00      	nop
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40012c00 	.word	0x40012c00
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800
 800349c:	40013400 	.word	0x40013400
 80034a0:	40014000 	.word	0x40014000
 80034a4:	40014400 	.word	0x40014400
 80034a8:	40014800 	.word	0x40014800

080034ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e042      	b.n	80035d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003550:	2b00      	cmp	r3, #0
 8003552:	d106      	bne.n	8003562 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7fd fbe3 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2224      	movs	r2, #36	; 0x24
 8003566:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0201 	bic.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fa5c 	bl	8003a38 <UART_SetConfig>
 8003580:	4603      	mov	r3, r0
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e022      	b.n	80035d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fcf8 	bl	8003f88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 fd7f 	bl	80040cc <UART_CheckIdleState>
 80035ce:	4603      	mov	r3, r0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	4613      	mov	r3, r2
 80035e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	d170      	bne.n	80036d2 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <HAL_UART_Receive_DMA+0x24>
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e069      	b.n	80036d4 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_UART_Receive_DMA+0x36>
 800360a:	2302      	movs	r3, #2
 800360c:	e062      	b.n	80036d4 <HAL_UART_Receive_DMA+0xfc>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	88fa      	ldrh	r2, [r7, #6]
 8003620:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2222      	movs	r2, #34	; 0x22
 8003630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003638:	2b00      	cmp	r3, #0
 800363a:	d02c      	beq.n	8003696 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003640:	4a26      	ldr	r2, [pc, #152]	; (80036dc <HAL_UART_Receive_DMA+0x104>)
 8003642:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003648:	4a25      	ldr	r2, [pc, #148]	; (80036e0 <HAL_UART_Receive_DMA+0x108>)
 800364a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003650:	4a24      	ldr	r2, [pc, #144]	; (80036e4 <HAL_UART_Receive_DMA+0x10c>)
 8003652:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003658:	2200      	movs	r2, #0
 800365a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3324      	adds	r3, #36	; 0x24
 8003666:	4619      	mov	r1, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366c:	461a      	mov	r2, r3
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	f7fd fe92 	bl	8001398 <HAL_DMA_Start_IT>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00d      	beq.n	8003696 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2210      	movs	r2, #16
 800367e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e01e      	b.n	80036d4 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ac:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0201 	orr.w	r2, r2, #1
 80036bc:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036cc:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
  }
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	080042df 	.word	0x080042df
 80036e0:	08004349 	.word	0x08004349
 80036e4:	08004365 	.word	0x08004365

080036e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	f640 030f 	movw	r3, #2063	; 0x80f
 800370e:	4013      	ands	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d118      	bne.n	800374a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d013      	beq.n	800374a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b00      	cmp	r3, #0
 800372a:	d104      	bne.n	8003736 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 8145 	beq.w	80039ca <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	4798      	blx	r3
      }
      return;
 8003748:	e13f      	b.n	80039ca <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 80e8 	beq.w	8003922 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4ba1      	ldr	r3, [pc, #644]	; (80039dc <HAL_UART_IRQHandler+0x2f4>)
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d105      	bne.n	8003768 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4ba0      	ldr	r3, [pc, #640]	; (80039e0 <HAL_UART_IRQHandler+0x2f8>)
 8003760:	4013      	ands	r3, r2
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 80dd 	beq.w	8003922 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d010      	beq.n	8003794 <HAL_UART_IRQHandler+0xac>
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00b      	beq.n	8003794 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2201      	movs	r2, #1
 8003782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378a:	f043 0201 	orr.w	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d010      	beq.n	80037c0 <HAL_UART_IRQHandler+0xd8>
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00b      	beq.n	80037c0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2202      	movs	r2, #2
 80037ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b6:	f043 0204 	orr.w	r2, r3, #4
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d010      	beq.n	80037ec <HAL_UART_IRQHandler+0x104>
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00b      	beq.n	80037ec <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2204      	movs	r2, #4
 80037da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e2:	f043 0202 	orr.w	r2, r3, #2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d015      	beq.n	8003822 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d104      	bne.n	800380a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	4b76      	ldr	r3, [pc, #472]	; (80039dc <HAL_UART_IRQHandler+0x2f4>)
 8003804:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00b      	beq.n	8003822 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2208      	movs	r2, #8
 8003810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003818:	f043 0208 	orr.w	r2, r3, #8
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003828:	2b00      	cmp	r3, #0
 800382a:	d011      	beq.n	8003850 <HAL_UART_IRQHandler+0x168>
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00c      	beq.n	8003850 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800383e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	f043 0220 	orr.w	r2, r3, #32
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 80b9 	beq.w	80039ce <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	2b00      	cmp	r3, #0
 8003864:	d011      	beq.n	800388a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b00      	cmp	r3, #0
 800386e:	d104      	bne.n	800387a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d007      	beq.n	800388a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389c:	2b40      	cmp	r3, #64	; 0x40
 800389e:	d004      	beq.n	80038aa <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d031      	beq.n	800390e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fcf4 	bl	8004298 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b40      	cmp	r3, #64	; 0x40
 80038bc:	d123      	bne.n	8003906 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038cc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d013      	beq.n	80038fe <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038da:	4a42      	ldr	r2, [pc, #264]	; (80039e4 <HAL_UART_IRQHandler+0x2fc>)
 80038dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fd fdd3 	bl	800148e <HAL_DMA_Abort_IT>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d017      	beq.n	800391e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80038f8:	4610      	mov	r0, r2
 80038fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fc:	e00f      	b.n	800391e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f890 	bl	8003a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003904:	e00b      	b.n	800391e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f88c 	bl	8003a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390c:	e007      	b.n	800391e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f888 	bl	8003a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800391c:	e057      	b.n	80039ce <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391e:	bf00      	nop
    return;
 8003920:	e055      	b.n	80039ce <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00d      	beq.n	8003948 <HAL_UART_IRQHandler+0x260>
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d008      	beq.n	8003948 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800393e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fd7f 	bl	8004444 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003946:	e045      	b.n	80039d4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394e:	2b00      	cmp	r3, #0
 8003950:	d012      	beq.n	8003978 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003958:	2b00      	cmp	r3, #0
 800395a:	d104      	bne.n	8003966 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	2b00      	cmp	r3, #0
 800396c:	d031      	beq.n	80039d2 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	4798      	blx	r3
    }
    return;
 8003976:	e02c      	b.n	80039d2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d008      	beq.n	8003994 <HAL_UART_IRQHandler+0x2ac>
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fd3f 	bl	8004410 <UART_EndTransmit_IT>
    return;
 8003992:	e01f      	b.n	80039d4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d008      	beq.n	80039b0 <HAL_UART_IRQHandler+0x2c8>
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 fd5f 	bl	800446c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039ae:	e011      	b.n	80039d4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00c      	beq.n	80039d4 <HAL_UART_IRQHandler+0x2ec>
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	da09      	bge.n	80039d4 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 fd49 	bl	8004458 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039c6:	bf00      	nop
 80039c8:	e004      	b.n	80039d4 <HAL_UART_IRQHandler+0x2ec>
      return;
 80039ca:	bf00      	nop
 80039cc:	e002      	b.n	80039d4 <HAL_UART_IRQHandler+0x2ec>
    return;
 80039ce:	bf00      	nop
 80039d0:	e000      	b.n	80039d4 <HAL_UART_IRQHandler+0x2ec>
    return;
 80039d2:	bf00      	nop
  }
}
 80039d4:	3720      	adds	r7, #32
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	10000001 	.word	0x10000001
 80039e0:	04000120 	.word	0x04000120
 80039e4:	080043e5 	.word	0x080043e5

080039e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a38:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003a3c:	b088      	sub	sp, #32
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	4bb0      	ldr	r3, [pc, #704]	; (8003d30 <UART_SetConfig+0x2f8>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6812      	ldr	r2, [r2, #0]
 8003a76:	69f9      	ldr	r1, [r7, #28]
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4aa5      	ldr	r2, [pc, #660]	; (8003d34 <UART_SetConfig+0x2fc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d004      	beq.n	8003aac <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003ab6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	69f9      	ldr	r1, [r7, #28]
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	f023 010f 	bic.w	r1, r3, #15
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a96      	ldr	r2, [pc, #600]	; (8003d38 <UART_SetConfig+0x300>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d121      	bne.n	8003b28 <UART_SetConfig+0xf0>
 8003ae4:	4b95      	ldr	r3, [pc, #596]	; (8003d3c <UART_SetConfig+0x304>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d816      	bhi.n	8003b20 <UART_SetConfig+0xe8>
 8003af2:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <UART_SetConfig+0xc0>)
 8003af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af8:	08003b09 	.word	0x08003b09
 8003afc:	08003b15 	.word	0x08003b15
 8003b00:	08003b0f 	.word	0x08003b0f
 8003b04:	08003b1b 	.word	0x08003b1b
 8003b08:	2301      	movs	r3, #1
 8003b0a:	76fb      	strb	r3, [r7, #27]
 8003b0c:	e0be      	b.n	8003c8c <UART_SetConfig+0x254>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	76fb      	strb	r3, [r7, #27]
 8003b12:	e0bb      	b.n	8003c8c <UART_SetConfig+0x254>
 8003b14:	2304      	movs	r3, #4
 8003b16:	76fb      	strb	r3, [r7, #27]
 8003b18:	e0b8      	b.n	8003c8c <UART_SetConfig+0x254>
 8003b1a:	2308      	movs	r3, #8
 8003b1c:	76fb      	strb	r3, [r7, #27]
 8003b1e:	e0b5      	b.n	8003c8c <UART_SetConfig+0x254>
 8003b20:	2310      	movs	r3, #16
 8003b22:	76fb      	strb	r3, [r7, #27]
 8003b24:	bf00      	nop
 8003b26:	e0b1      	b.n	8003c8c <UART_SetConfig+0x254>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a84      	ldr	r2, [pc, #528]	; (8003d40 <UART_SetConfig+0x308>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d134      	bne.n	8003b9c <UART_SetConfig+0x164>
 8003b32:	4b82      	ldr	r3, [pc, #520]	; (8003d3c <UART_SetConfig+0x304>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b38:	f003 030c 	and.w	r3, r3, #12
 8003b3c:	2b0c      	cmp	r3, #12
 8003b3e:	d829      	bhi.n	8003b94 <UART_SetConfig+0x15c>
 8003b40:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <UART_SetConfig+0x110>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b7d 	.word	0x08003b7d
 8003b4c:	08003b95 	.word	0x08003b95
 8003b50:	08003b95 	.word	0x08003b95
 8003b54:	08003b95 	.word	0x08003b95
 8003b58:	08003b89 	.word	0x08003b89
 8003b5c:	08003b95 	.word	0x08003b95
 8003b60:	08003b95 	.word	0x08003b95
 8003b64:	08003b95 	.word	0x08003b95
 8003b68:	08003b83 	.word	0x08003b83
 8003b6c:	08003b95 	.word	0x08003b95
 8003b70:	08003b95 	.word	0x08003b95
 8003b74:	08003b95 	.word	0x08003b95
 8003b78:	08003b8f 	.word	0x08003b8f
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	76fb      	strb	r3, [r7, #27]
 8003b80:	e084      	b.n	8003c8c <UART_SetConfig+0x254>
 8003b82:	2302      	movs	r3, #2
 8003b84:	76fb      	strb	r3, [r7, #27]
 8003b86:	e081      	b.n	8003c8c <UART_SetConfig+0x254>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	76fb      	strb	r3, [r7, #27]
 8003b8c:	e07e      	b.n	8003c8c <UART_SetConfig+0x254>
 8003b8e:	2308      	movs	r3, #8
 8003b90:	76fb      	strb	r3, [r7, #27]
 8003b92:	e07b      	b.n	8003c8c <UART_SetConfig+0x254>
 8003b94:	2310      	movs	r3, #16
 8003b96:	76fb      	strb	r3, [r7, #27]
 8003b98:	bf00      	nop
 8003b9a:	e077      	b.n	8003c8c <UART_SetConfig+0x254>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a68      	ldr	r2, [pc, #416]	; (8003d44 <UART_SetConfig+0x30c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d120      	bne.n	8003be8 <UART_SetConfig+0x1b0>
 8003ba6:	4b65      	ldr	r3, [pc, #404]	; (8003d3c <UART_SetConfig+0x304>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d00f      	beq.n	8003bd4 <UART_SetConfig+0x19c>
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d802      	bhi.n	8003bbe <UART_SetConfig+0x186>
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <UART_SetConfig+0x190>
 8003bbc:	e010      	b.n	8003be0 <UART_SetConfig+0x1a8>
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	d005      	beq.n	8003bce <UART_SetConfig+0x196>
 8003bc2:	2b30      	cmp	r3, #48	; 0x30
 8003bc4:	d009      	beq.n	8003bda <UART_SetConfig+0x1a2>
 8003bc6:	e00b      	b.n	8003be0 <UART_SetConfig+0x1a8>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	76fb      	strb	r3, [r7, #27]
 8003bcc:	e05e      	b.n	8003c8c <UART_SetConfig+0x254>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	76fb      	strb	r3, [r7, #27]
 8003bd2:	e05b      	b.n	8003c8c <UART_SetConfig+0x254>
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	76fb      	strb	r3, [r7, #27]
 8003bd8:	e058      	b.n	8003c8c <UART_SetConfig+0x254>
 8003bda:	2308      	movs	r3, #8
 8003bdc:	76fb      	strb	r3, [r7, #27]
 8003bde:	e055      	b.n	8003c8c <UART_SetConfig+0x254>
 8003be0:	2310      	movs	r3, #16
 8003be2:	76fb      	strb	r3, [r7, #27]
 8003be4:	bf00      	nop
 8003be6:	e051      	b.n	8003c8c <UART_SetConfig+0x254>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a56      	ldr	r2, [pc, #344]	; (8003d48 <UART_SetConfig+0x310>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d120      	bne.n	8003c34 <UART_SetConfig+0x1fc>
 8003bf2:	4b52      	ldr	r3, [pc, #328]	; (8003d3c <UART_SetConfig+0x304>)
 8003bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bfc:	2b40      	cmp	r3, #64	; 0x40
 8003bfe:	d00f      	beq.n	8003c20 <UART_SetConfig+0x1e8>
 8003c00:	2b40      	cmp	r3, #64	; 0x40
 8003c02:	d802      	bhi.n	8003c0a <UART_SetConfig+0x1d2>
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <UART_SetConfig+0x1dc>
 8003c08:	e010      	b.n	8003c2c <UART_SetConfig+0x1f4>
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d005      	beq.n	8003c1a <UART_SetConfig+0x1e2>
 8003c0e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c10:	d009      	beq.n	8003c26 <UART_SetConfig+0x1ee>
 8003c12:	e00b      	b.n	8003c2c <UART_SetConfig+0x1f4>
 8003c14:	2300      	movs	r3, #0
 8003c16:	76fb      	strb	r3, [r7, #27]
 8003c18:	e038      	b.n	8003c8c <UART_SetConfig+0x254>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	76fb      	strb	r3, [r7, #27]
 8003c1e:	e035      	b.n	8003c8c <UART_SetConfig+0x254>
 8003c20:	2304      	movs	r3, #4
 8003c22:	76fb      	strb	r3, [r7, #27]
 8003c24:	e032      	b.n	8003c8c <UART_SetConfig+0x254>
 8003c26:	2308      	movs	r3, #8
 8003c28:	76fb      	strb	r3, [r7, #27]
 8003c2a:	e02f      	b.n	8003c8c <UART_SetConfig+0x254>
 8003c2c:	2310      	movs	r3, #16
 8003c2e:	76fb      	strb	r3, [r7, #27]
 8003c30:	bf00      	nop
 8003c32:	e02b      	b.n	8003c8c <UART_SetConfig+0x254>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a3e      	ldr	r2, [pc, #248]	; (8003d34 <UART_SetConfig+0x2fc>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d124      	bne.n	8003c88 <UART_SetConfig+0x250>
 8003c3e:	4b3f      	ldr	r3, [pc, #252]	; (8003d3c <UART_SetConfig+0x304>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4c:	d012      	beq.n	8003c74 <UART_SetConfig+0x23c>
 8003c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c52:	d802      	bhi.n	8003c5a <UART_SetConfig+0x222>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <UART_SetConfig+0x230>
 8003c58:	e012      	b.n	8003c80 <UART_SetConfig+0x248>
 8003c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c5e:	d006      	beq.n	8003c6e <UART_SetConfig+0x236>
 8003c60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c64:	d009      	beq.n	8003c7a <UART_SetConfig+0x242>
 8003c66:	e00b      	b.n	8003c80 <UART_SetConfig+0x248>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	76fb      	strb	r3, [r7, #27]
 8003c6c:	e00e      	b.n	8003c8c <UART_SetConfig+0x254>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	76fb      	strb	r3, [r7, #27]
 8003c72:	e00b      	b.n	8003c8c <UART_SetConfig+0x254>
 8003c74:	2304      	movs	r3, #4
 8003c76:	76fb      	strb	r3, [r7, #27]
 8003c78:	e008      	b.n	8003c8c <UART_SetConfig+0x254>
 8003c7a:	2308      	movs	r3, #8
 8003c7c:	76fb      	strb	r3, [r7, #27]
 8003c7e:	e005      	b.n	8003c8c <UART_SetConfig+0x254>
 8003c80:	2310      	movs	r3, #16
 8003c82:	76fb      	strb	r3, [r7, #27]
 8003c84:	bf00      	nop
 8003c86:	e001      	b.n	8003c8c <UART_SetConfig+0x254>
 8003c88:	2310      	movs	r3, #16
 8003c8a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a28      	ldr	r2, [pc, #160]	; (8003d34 <UART_SetConfig+0x2fc>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	f040 80a1 	bne.w	8003dda <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c98:	7efb      	ldrb	r3, [r7, #27]
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d823      	bhi.n	8003ce6 <UART_SetConfig+0x2ae>
 8003c9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <UART_SetConfig+0x26c>)
 8003ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca4:	08003cc9 	.word	0x08003cc9
 8003ca8:	08003ce7 	.word	0x08003ce7
 8003cac:	08003cd1 	.word	0x08003cd1
 8003cb0:	08003ce7 	.word	0x08003ce7
 8003cb4:	08003cd7 	.word	0x08003cd7
 8003cb8:	08003ce7 	.word	0x08003ce7
 8003cbc:	08003ce7 	.word	0x08003ce7
 8003cc0:	08003ce7 	.word	0x08003ce7
 8003cc4:	08003cdf 	.word	0x08003cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc8:	f7fe fe58 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 8003ccc:	6178      	str	r0, [r7, #20]
        break;
 8003cce:	e00f      	b.n	8003cf0 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cd0:	4b1e      	ldr	r3, [pc, #120]	; (8003d4c <UART_SetConfig+0x314>)
 8003cd2:	617b      	str	r3, [r7, #20]
        break;
 8003cd4:	e00c      	b.n	8003cf0 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cd6:	f7fe fde3 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8003cda:	6178      	str	r0, [r7, #20]
        break;
 8003cdc:	e008      	b.n	8003cf0 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce2:	617b      	str	r3, [r7, #20]
        break;
 8003ce4:	e004      	b.n	8003cf0 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	76bb      	strb	r3, [r7, #26]
        break;
 8003cee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 8130 	beq.w	8003f58 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	4a14      	ldr	r2, [pc, #80]	; (8003d50 <UART_SetConfig+0x318>)
 8003cfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d02:	461a      	mov	r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d0a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	4413      	add	r3, r2
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d305      	bcc.n	8003d28 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d915      	bls.n	8003d54 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	76bb      	strb	r3, [r7, #26]
 8003d2c:	e114      	b.n	8003f58 <UART_SetConfig+0x520>
 8003d2e:	bf00      	nop
 8003d30:	cfff69f3 	.word	0xcfff69f3
 8003d34:	40008000 	.word	0x40008000
 8003d38:	40013800 	.word	0x40013800
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	40004400 	.word	0x40004400
 8003d44:	40004800 	.word	0x40004800
 8003d48:	40004c00 	.word	0x40004c00
 8003d4c:	00f42400 	.word	0x00f42400
 8003d50:	08007244 	.word	0x08007244
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f04f 0100 	mov.w	r1, #0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	4a87      	ldr	r2, [pc, #540]	; (8003f80 <UART_SetConfig+0x548>)
 8003d62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	f04f 0400 	mov.w	r4, #0
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4623      	mov	r3, r4
 8003d70:	f7fc fa56 	bl	8000220 <__aeabi_uldivmod>
 8003d74:	4603      	mov	r3, r0
 8003d76:	460c      	mov	r4, r1
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	f04f 0400 	mov.w	r4, #0
 8003d84:	0214      	lsls	r4, r2, #8
 8003d86:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003d8a:	020b      	lsls	r3, r1, #8
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6852      	ldr	r2, [r2, #4]
 8003d90:	0852      	lsrs	r2, r2, #1
 8003d92:	4611      	mov	r1, r2
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	eb13 0b01 	adds.w	fp, r3, r1
 8003d9c:	eb44 0c02 	adc.w	ip, r4, r2
 8003da0:	4658      	mov	r0, fp
 8003da2:	4661      	mov	r1, ip
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f04f 0400 	mov.w	r4, #0
 8003dac:	461a      	mov	r2, r3
 8003dae:	4623      	mov	r3, r4
 8003db0:	f7fc fa36 	bl	8000220 <__aeabi_uldivmod>
 8003db4:	4603      	mov	r3, r0
 8003db6:	460c      	mov	r4, r1
 8003db8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dc0:	d308      	bcc.n	8003dd4 <UART_SetConfig+0x39c>
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dc8:	d204      	bcs.n	8003dd4 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	60da      	str	r2, [r3, #12]
 8003dd2:	e0c1      	b.n	8003f58 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	76bb      	strb	r3, [r7, #26]
 8003dd8:	e0be      	b.n	8003f58 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de2:	d164      	bne.n	8003eae <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8003de4:	7efb      	ldrb	r3, [r7, #27]
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d827      	bhi.n	8003e3a <UART_SetConfig+0x402>
 8003dea:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <UART_SetConfig+0x3b8>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003e15 	.word	0x08003e15
 8003df4:	08003e1d 	.word	0x08003e1d
 8003df8:	08003e25 	.word	0x08003e25
 8003dfc:	08003e3b 	.word	0x08003e3b
 8003e00:	08003e2b 	.word	0x08003e2b
 8003e04:	08003e3b 	.word	0x08003e3b
 8003e08:	08003e3b 	.word	0x08003e3b
 8003e0c:	08003e3b 	.word	0x08003e3b
 8003e10:	08003e33 	.word	0x08003e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e14:	f7fe fdb2 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 8003e18:	6178      	str	r0, [r7, #20]
        break;
 8003e1a:	e013      	b.n	8003e44 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e1c:	f7fe fdc4 	bl	80029a8 <HAL_RCC_GetPCLK2Freq>
 8003e20:	6178      	str	r0, [r7, #20]
        break;
 8003e22:	e00f      	b.n	8003e44 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e24:	4b57      	ldr	r3, [pc, #348]	; (8003f84 <UART_SetConfig+0x54c>)
 8003e26:	617b      	str	r3, [r7, #20]
        break;
 8003e28:	e00c      	b.n	8003e44 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2a:	f7fe fd39 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8003e2e:	6178      	str	r0, [r7, #20]
        break;
 8003e30:	e008      	b.n	8003e44 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e36:	617b      	str	r3, [r7, #20]
        break;
 8003e38:	e004      	b.n	8003e44 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	76bb      	strb	r3, [r7, #26]
        break;
 8003e42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8086 	beq.w	8003f58 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	4a4b      	ldr	r2, [pc, #300]	; (8003f80 <UART_SetConfig+0x548>)
 8003e52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e56:	461a      	mov	r2, r3
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e5e:	005a      	lsls	r2, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	085b      	lsrs	r3, r3, #1
 8003e66:	441a      	add	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	2b0f      	cmp	r3, #15
 8003e78:	d916      	bls.n	8003ea8 <UART_SetConfig+0x470>
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e80:	d212      	bcs.n	8003ea8 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	f023 030f 	bic.w	r3, r3, #15
 8003e8a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	085b      	lsrs	r3, r3, #1
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	89fb      	ldrh	r3, [r7, #14]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	89fa      	ldrh	r2, [r7, #14]
 8003ea4:	60da      	str	r2, [r3, #12]
 8003ea6:	e057      	b.n	8003f58 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	76bb      	strb	r3, [r7, #26]
 8003eac:	e054      	b.n	8003f58 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eae:	7efb      	ldrb	r3, [r7, #27]
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d828      	bhi.n	8003f06 <UART_SetConfig+0x4ce>
 8003eb4:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <UART_SetConfig+0x484>)
 8003eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eba:	bf00      	nop
 8003ebc:	08003ee1 	.word	0x08003ee1
 8003ec0:	08003ee9 	.word	0x08003ee9
 8003ec4:	08003ef1 	.word	0x08003ef1
 8003ec8:	08003f07 	.word	0x08003f07
 8003ecc:	08003ef7 	.word	0x08003ef7
 8003ed0:	08003f07 	.word	0x08003f07
 8003ed4:	08003f07 	.word	0x08003f07
 8003ed8:	08003f07 	.word	0x08003f07
 8003edc:	08003eff 	.word	0x08003eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ee0:	f7fe fd4c 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 8003ee4:	6178      	str	r0, [r7, #20]
        break;
 8003ee6:	e013      	b.n	8003f10 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ee8:	f7fe fd5e 	bl	80029a8 <HAL_RCC_GetPCLK2Freq>
 8003eec:	6178      	str	r0, [r7, #20]
        break;
 8003eee:	e00f      	b.n	8003f10 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ef0:	4b24      	ldr	r3, [pc, #144]	; (8003f84 <UART_SetConfig+0x54c>)
 8003ef2:	617b      	str	r3, [r7, #20]
        break;
 8003ef4:	e00c      	b.n	8003f10 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ef6:	f7fe fcd3 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8003efa:	6178      	str	r0, [r7, #20]
        break;
 8003efc:	e008      	b.n	8003f10 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f02:	617b      	str	r3, [r7, #20]
        break;
 8003f04:	e004      	b.n	8003f10 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	76bb      	strb	r3, [r7, #26]
        break;
 8003f0e:	bf00      	nop
    }

    if (pclk != 0U)
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d020      	beq.n	8003f58 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	4a19      	ldr	r2, [pc, #100]	; (8003f80 <UART_SetConfig+0x548>)
 8003f1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f20:	461a      	mov	r2, r3
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	085b      	lsrs	r3, r3, #1
 8003f2e:	441a      	add	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	2b0f      	cmp	r3, #15
 8003f40:	d908      	bls.n	8003f54 <UART_SetConfig+0x51c>
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f48:	d204      	bcs.n	8003f54 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	60da      	str	r2, [r3, #12]
 8003f52:	e001      	b.n	8003f58 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003f74:	7ebb      	ldrb	r3, [r7, #26]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3720      	adds	r7, #32
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003f80:	08007244 	.word	0x08007244
 8003f84:	00f42400 	.word	0x00f42400

08003f88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004064:	2b00      	cmp	r3, #0
 8004066:	d01a      	beq.n	800409e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004086:	d10a      	bne.n	800409e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	605a      	str	r2, [r3, #4]
  }
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040dc:	f7fc ffc8 	bl	8001070 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d10e      	bne.n	800410e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f82c 	bl	800415c <UART_WaitOnFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e022      	b.n	8004154 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b04      	cmp	r3, #4
 800411a:	d10e      	bne.n	800413a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800411c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f816 	bl	800415c <UART_WaitOnFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e00c      	b.n	8004154 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	4613      	mov	r3, r2
 800416a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800416c:	e062      	b.n	8004234 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004174:	d05e      	beq.n	8004234 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004176:	f7fc ff7b 	bl	8001070 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	429a      	cmp	r2, r3
 8004184:	d302      	bcc.n	800418c <UART_WaitOnFlagUntilTimeout+0x30>
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d11d      	bne.n	80041c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800419a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e045      	b.n	8004254 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d02e      	beq.n	8004234 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e4:	d126      	bne.n	8004234 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041fe:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0201 	bic.w	r2, r2, #1
 800420e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2220      	movs	r2, #32
 8004214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2220      	movs	r2, #32
 8004224:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e00f      	b.n	8004254 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69da      	ldr	r2, [r3, #28]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4013      	ands	r3, r2
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	429a      	cmp	r2, r3
 8004242:	bf0c      	ite	eq
 8004244:	2301      	moveq	r3, #1
 8004246:	2300      	movne	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	429a      	cmp	r2, r3
 8004250:	d08d      	beq.n	800416e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004272:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004282:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2220      	movs	r2, #32
 8004288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042ae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6812      	ldr	r2, [r2, #0]
 80042ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042be:	f023 0301 	bic.w	r3, r3, #1
 80042c2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d11f      	bne.n	800433a <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004310:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0201 	bic.w	r2, r2, #1
 8004320:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004330:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2220      	movs	r2, #32
 8004336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f7ff fb5e 	bl	80039fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f7ff fb5a 	bl	8003a10 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800435c:	bf00      	nop
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004378:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004380:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438c:	2b80      	cmp	r3, #128	; 0x80
 800438e:	d109      	bne.n	80043a4 <UART_DMAError+0x40>
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	2b21      	cmp	r3, #33	; 0x21
 8004394:	d106      	bne.n	80043a4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2200      	movs	r2, #0
 800439a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800439e:	6978      	ldr	r0, [r7, #20]
 80043a0:	f7ff ff5c 	bl	800425c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ae:	2b40      	cmp	r3, #64	; 0x40
 80043b0:	d109      	bne.n	80043c6 <UART_DMAError+0x62>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b22      	cmp	r3, #34	; 0x22
 80043b6:	d106      	bne.n	80043c6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80043c0:	6978      	ldr	r0, [r7, #20]
 80043c2:	f7ff ff69 	bl	8004298 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	f043 0210 	orr.w	r2, r3, #16
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043d6:	6978      	ldr	r0, [r7, #20]
 80043d8:	f7ff fb24 	bl	8003a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043dc:	bf00      	nop
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f7ff fb0e 	bl	8003a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004408:	bf00      	nop
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004426:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2220      	movs	r2, #32
 800442c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff fad6 	bl	80039e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800443c:	bf00      	nop
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_UARTEx_DisableFifoMode+0x16>
 8004492:	2302      	movs	r3, #2
 8004494:	e027      	b.n	80044e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2224      	movs	r2, #36	; 0x24
 80044a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0201 	bic.w	r2, r2, #1
 80044bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80044c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004506:	2302      	movs	r3, #2
 8004508:	e02d      	b.n	8004566 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2224      	movs	r2, #36	; 0x24
 8004516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0201 	bic.w	r2, r2, #1
 8004530:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f850 	bl	80045ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004582:	2302      	movs	r3, #2
 8004584:	e02d      	b.n	80045e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2224      	movs	r2, #36	; 0x24
 8004592:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0201 	bic.w	r2, r2, #1
 80045ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f812 	bl	80045ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b089      	sub	sp, #36	; 0x24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80045f4:	4a2f      	ldr	r2, [pc, #188]	; (80046b4 <UARTEx_SetNbDataToProcess+0xc8>)
 80045f6:	f107 0314 	add.w	r3, r7, #20
 80045fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045fe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004602:	4a2d      	ldr	r2, [pc, #180]	; (80046b8 <UARTEx_SetNbDataToProcess+0xcc>)
 8004604:	f107 030c 	add.w	r3, r7, #12
 8004608:	e892 0003 	ldmia.w	r2, {r0, r1}
 800460c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004614:	2b00      	cmp	r3, #0
 8004616:	d108      	bne.n	800462a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004628:	e03d      	b.n	80046a6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800462a:	2308      	movs	r3, #8
 800462c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800462e:	2308      	movs	r3, #8
 8004630:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	0e5b      	lsrs	r3, r3, #25
 800463a:	b2db      	uxtb	r3, r3
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	0f5b      	lsrs	r3, r3, #29
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004652:	7fbb      	ldrb	r3, [r7, #30]
 8004654:	7f3a      	ldrb	r2, [r7, #28]
 8004656:	f107 0120 	add.w	r1, r7, #32
 800465a:	440a      	add	r2, r1
 800465c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004660:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004664:	7f3a      	ldrb	r2, [r7, #28]
 8004666:	f107 0120 	add.w	r1, r7, #32
 800466a:	440a      	add	r2, r1
 800466c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004670:	fb93 f3f2 	sdiv	r3, r3, r2
 8004674:	b29a      	uxth	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800467c:	7ffb      	ldrb	r3, [r7, #31]
 800467e:	7f7a      	ldrb	r2, [r7, #29]
 8004680:	f107 0120 	add.w	r1, r7, #32
 8004684:	440a      	add	r2, r1
 8004686:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800468a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800468e:	7f7a      	ldrb	r2, [r7, #29]
 8004690:	f107 0120 	add.w	r1, r7, #32
 8004694:	440a      	add	r2, r1
 8004696:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800469a:	fb93 f3f2 	sdiv	r3, r3, r2
 800469e:	b29a      	uxth	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80046a6:	bf00      	nop
 80046a8:	3724      	adds	r7, #36	; 0x24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	080071e0 	.word	0x080071e0
 80046b8:	080071e8 	.word	0x080071e8

080046bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80046c0:	bf00      	nop
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
	...

080046cc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046d2:	f3ef 8305 	mrs	r3, IPSR
 80046d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80046d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10f      	bne.n	80046fe <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046de:	f3ef 8310 	mrs	r3, PRIMASK
 80046e2:	607b      	str	r3, [r7, #4]
  return(result);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d105      	bne.n	80046f6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046ea:	f3ef 8311 	mrs	r3, BASEPRI
 80046ee:	603b      	str	r3, [r7, #0]
  return(result);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d007      	beq.n	8004706 <osKernelInitialize+0x3a>
 80046f6:	4b0e      	ldr	r3, [pc, #56]	; (8004730 <osKernelInitialize+0x64>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d103      	bne.n	8004706 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80046fe:	f06f 0305 	mvn.w	r3, #5
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	e00c      	b.n	8004720 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004706:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <osKernelInitialize+0x64>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d105      	bne.n	800471a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800470e:	4b08      	ldr	r3, [pc, #32]	; (8004730 <osKernelInitialize+0x64>)
 8004710:	2201      	movs	r2, #1
 8004712:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004714:	2300      	movs	r3, #0
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	e002      	b.n	8004720 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800471a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800471e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004720:	68fb      	ldr	r3, [r7, #12]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	2000002c 	.word	0x2000002c

08004734 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800473a:	f3ef 8305 	mrs	r3, IPSR
 800473e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004740:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10f      	bne.n	8004766 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004746:	f3ef 8310 	mrs	r3, PRIMASK
 800474a:	607b      	str	r3, [r7, #4]
  return(result);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d105      	bne.n	800475e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004752:	f3ef 8311 	mrs	r3, BASEPRI
 8004756:	603b      	str	r3, [r7, #0]
  return(result);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d007      	beq.n	800476e <osKernelStart+0x3a>
 800475e:	4b0f      	ldr	r3, [pc, #60]	; (800479c <osKernelStart+0x68>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d103      	bne.n	800476e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004766:	f06f 0305 	mvn.w	r3, #5
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	e010      	b.n	8004790 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800476e:	4b0b      	ldr	r3, [pc, #44]	; (800479c <osKernelStart+0x68>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d109      	bne.n	800478a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004776:	f7ff ffa1 	bl	80046bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800477a:	4b08      	ldr	r3, [pc, #32]	; (800479c <osKernelStart+0x68>)
 800477c:	2202      	movs	r2, #2
 800477e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004780:	f001 f870 	bl	8005864 <vTaskStartScheduler>
      stat = osOK;
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	e002      	b.n	8004790 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800478a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800478e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004790:	68fb      	ldr	r3, [r7, #12]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	2000002c 	.word	0x2000002c

080047a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b090      	sub	sp, #64	; 0x40
 80047a4:	af04      	add	r7, sp, #16
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047b0:	f3ef 8305 	mrs	r3, IPSR
 80047b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80047b6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f040 808f 	bne.w	80048dc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047be:	f3ef 8310 	mrs	r3, PRIMASK
 80047c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d105      	bne.n	80047d6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047ca:	f3ef 8311 	mrs	r3, BASEPRI
 80047ce:	617b      	str	r3, [r7, #20]
  return(result);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <osThreadNew+0x3e>
 80047d6:	4b44      	ldr	r3, [pc, #272]	; (80048e8 <osThreadNew+0x148>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d07e      	beq.n	80048dc <osThreadNew+0x13c>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d07b      	beq.n	80048dc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80047e4:	2380      	movs	r3, #128	; 0x80
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80047e8:	2318      	movs	r3, #24
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80047f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047f4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d045      	beq.n	8004888 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <osThreadNew+0x6a>
        name = attr->name;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	2b00      	cmp	r3, #0
 800481c:	d008      	beq.n	8004830 <osThreadNew+0x90>
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	2b38      	cmp	r3, #56	; 0x38
 8004822:	d805      	bhi.n	8004830 <osThreadNew+0x90>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <osThreadNew+0x94>
        return (NULL);
 8004830:	2300      	movs	r3, #0
 8004832:	e054      	b.n	80048de <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	089b      	lsrs	r3, r3, #2
 8004842:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00e      	beq.n	800486a <osThreadNew+0xca>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	2b5b      	cmp	r3, #91	; 0x5b
 8004852:	d90a      	bls.n	800486a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004858:	2b00      	cmp	r3, #0
 800485a:	d006      	beq.n	800486a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <osThreadNew+0xca>
        mem = 1;
 8004864:	2301      	movs	r3, #1
 8004866:	623b      	str	r3, [r7, #32]
 8004868:	e010      	b.n	800488c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10c      	bne.n	800488c <osThreadNew+0xec>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d108      	bne.n	800488c <osThreadNew+0xec>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d104      	bne.n	800488c <osThreadNew+0xec>
          mem = 0;
 8004882:	2300      	movs	r3, #0
 8004884:	623b      	str	r3, [r7, #32]
 8004886:	e001      	b.n	800488c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d110      	bne.n	80048b4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800489a:	9202      	str	r2, [sp, #8]
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 fe09 	bl	80054c0 <xTaskCreateStatic>
 80048ae:	4603      	mov	r3, r0
 80048b0:	613b      	str	r3, [r7, #16]
 80048b2:	e013      	b.n	80048dc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d110      	bne.n	80048dc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048bc:	b29a      	uxth	r2, r3
 80048be:	f107 0310 	add.w	r3, r7, #16
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 fe51 	bl	8005574 <xTaskCreate>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d001      	beq.n	80048dc <osThreadNew+0x13c>
          hTask = NULL;
 80048d8:	2300      	movs	r3, #0
 80048da:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80048dc:	693b      	ldr	r3, [r7, #16]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3730      	adds	r7, #48	; 0x30
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	2000002c 	.word	0x2000002c

080048ec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048f4:	f3ef 8305 	mrs	r3, IPSR
 80048f8:	613b      	str	r3, [r7, #16]
  return(result);
 80048fa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10f      	bne.n	8004920 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004900:	f3ef 8310 	mrs	r3, PRIMASK
 8004904:	60fb      	str	r3, [r7, #12]
  return(result);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d105      	bne.n	8004918 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800490c:	f3ef 8311 	mrs	r3, BASEPRI
 8004910:	60bb      	str	r3, [r7, #8]
  return(result);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d007      	beq.n	8004928 <osDelay+0x3c>
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <osDelay+0x58>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b02      	cmp	r3, #2
 800491e:	d103      	bne.n	8004928 <osDelay+0x3c>
    stat = osErrorISR;
 8004920:	f06f 0305 	mvn.w	r3, #5
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	e007      	b.n	8004938 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004928:	2300      	movs	r3, #0
 800492a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 ff62 	bl	80057fc <vTaskDelay>
    }
  }

  return (stat);
 8004938:	697b      	ldr	r3, [r7, #20]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	2000002c 	.word	0x2000002c

08004948 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4a07      	ldr	r2, [pc, #28]	; (8004974 <vApplicationGetIdleTaskMemory+0x2c>)
 8004958:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4a06      	ldr	r2, [pc, #24]	; (8004978 <vApplicationGetIdleTaskMemory+0x30>)
 800495e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2280      	movs	r2, #128	; 0x80
 8004964:	601a      	str	r2, [r3, #0]
}
 8004966:	bf00      	nop
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20000030 	.word	0x20000030
 8004978:	2000008c 	.word	0x2000008c

0800497c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4a07      	ldr	r2, [pc, #28]	; (80049a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800498c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	4a06      	ldr	r2, [pc, #24]	; (80049ac <vApplicationGetTimerTaskMemory+0x30>)
 8004992:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800499a:	601a      	str	r2, [r3, #0]
}
 800499c:	bf00      	nop
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	2000028c 	.word	0x2000028c
 80049ac:	200002e8 	.word	0x200002e8

080049b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f103 0208 	add.w	r2, r3, #8
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f103 0208 	add.w	r2, r3, #8
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f103 0208 	add.w	r2, r3, #8
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	601a      	str	r2, [r3, #0]
}
 8004a46:	bf00      	nop
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a52:	b480      	push	{r7}
 8004a54:	b085      	sub	sp, #20
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a68:	d103      	bne.n	8004a72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	e00c      	b.n	8004a8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3308      	adds	r3, #8
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	e002      	b.n	8004a80 <vListInsert+0x2e>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d2f6      	bcs.n	8004a7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	601a      	str	r2, [r3, #0]
}
 8004ab8:	bf00      	nop
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6892      	ldr	r2, [r2, #8]
 8004ada:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6852      	ldr	r2, [r2, #4]
 8004ae4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d103      	bne.n	8004af8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	1e5a      	subs	r2, r3, #1
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d109      	bne.n	8004b40 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	60bb      	str	r3, [r7, #8]
 8004b3e:	e7fe      	b.n	8004b3e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004b40:	f002 f814 	bl	8006b6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4c:	68f9      	ldr	r1, [r7, #12]
 8004b4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b50:	fb01 f303 	mul.w	r3, r1, r3
 8004b54:	441a      	add	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b70:	3b01      	subs	r3, #1
 8004b72:	68f9      	ldr	r1, [r7, #12]
 8004b74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b76:	fb01 f303 	mul.w	r3, r1, r3
 8004b7a:	441a      	add	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	22ff      	movs	r2, #255	; 0xff
 8004b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	22ff      	movs	r2, #255	; 0xff
 8004b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d114      	bne.n	8004bc0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d01a      	beq.n	8004bd4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3310      	adds	r3, #16
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f001 f8de 	bl	8005d64 <xTaskRemoveFromEventList>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d012      	beq.n	8004bd4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004bae:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <xQueueGenericReset+0xcc>)
 8004bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	e009      	b.n	8004bd4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3310      	adds	r3, #16
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff fef3 	bl	80049b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3324      	adds	r3, #36	; 0x24
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff feee 	bl	80049b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004bd4:	f001 fff8 	bl	8006bc8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004bd8:	2301      	movs	r3, #1
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	e000ed04 	.word	0xe000ed04

08004be8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08e      	sub	sp, #56	; 0x38
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d109      	bne.n	8004c10 <xQueueGenericCreateStatic+0x28>
 8004bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c0e:	e7fe      	b.n	8004c0e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d109      	bne.n	8004c2a <xQueueGenericCreateStatic+0x42>
 8004c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
 8004c28:	e7fe      	b.n	8004c28 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <xQueueGenericCreateStatic+0x4e>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <xQueueGenericCreateStatic+0x52>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <xQueueGenericCreateStatic+0x54>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d109      	bne.n	8004c54 <xQueueGenericCreateStatic+0x6c>
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	623b      	str	r3, [r7, #32]
 8004c52:	e7fe      	b.n	8004c52 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d102      	bne.n	8004c60 <xQueueGenericCreateStatic+0x78>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <xQueueGenericCreateStatic+0x7c>
 8004c60:	2301      	movs	r3, #1
 8004c62:	e000      	b.n	8004c66 <xQueueGenericCreateStatic+0x7e>
 8004c64:	2300      	movs	r3, #0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <xQueueGenericCreateStatic+0x96>
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	61fb      	str	r3, [r7, #28]
 8004c7c:	e7fe      	b.n	8004c7c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c7e:	2350      	movs	r3, #80	; 0x50
 8004c80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b50      	cmp	r3, #80	; 0x50
 8004c86:	d009      	beq.n	8004c9c <xQueueGenericCreateStatic+0xb4>
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	e7fe      	b.n	8004c9a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c9c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00d      	beq.n	8004cc4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cb0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	68b9      	ldr	r1, [r7, #8]
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 f805 	bl	8004cce <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3730      	adds	r7, #48	; 0x30
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	607a      	str	r2, [r7, #4]
 8004cda:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d103      	bne.n	8004cea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	e002      	b.n	8004cf0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	69b8      	ldr	r0, [r7, #24]
 8004d00:	f7ff ff0a 	bl	8004b18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	78fa      	ldrb	r2, [r7, #3]
 8004d08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d0c:	bf00      	nop
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08e      	sub	sp, #56	; 0x38
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d22:	2300      	movs	r3, #0
 8004d24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d109      	bne.n	8004d44 <xQueueGenericSend+0x30>
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d42:	e7fe      	b.n	8004d42 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d103      	bne.n	8004d52 <xQueueGenericSend+0x3e>
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <xQueueGenericSend+0x42>
 8004d52:	2301      	movs	r3, #1
 8004d54:	e000      	b.n	8004d58 <xQueueGenericSend+0x44>
 8004d56:	2300      	movs	r3, #0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d109      	bne.n	8004d70 <xQueueGenericSend+0x5c>
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6e:	e7fe      	b.n	8004d6e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d103      	bne.n	8004d7e <xQueueGenericSend+0x6a>
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d101      	bne.n	8004d82 <xQueueGenericSend+0x6e>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <xQueueGenericSend+0x70>
 8004d82:	2300      	movs	r3, #0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d109      	bne.n	8004d9c <xQueueGenericSend+0x88>
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	623b      	str	r3, [r7, #32]
 8004d9a:	e7fe      	b.n	8004d9a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d9c:	f001 f998 	bl	80060d0 <xTaskGetSchedulerState>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d102      	bne.n	8004dac <xQueueGenericSend+0x98>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <xQueueGenericSend+0x9c>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <xQueueGenericSend+0x9e>
 8004db0:	2300      	movs	r3, #0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d109      	bne.n	8004dca <xQueueGenericSend+0xb6>
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	61fb      	str	r3, [r7, #28]
 8004dc8:	e7fe      	b.n	8004dc8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dca:	f001 fecf 	bl	8006b6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d302      	bcc.n	8004de0 <xQueueGenericSend+0xcc>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d129      	bne.n	8004e34 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004de6:	f000 f9ff 	bl	80051e8 <prvCopyDataToQueue>
 8004dea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d010      	beq.n	8004e16 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	3324      	adds	r3, #36	; 0x24
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 ffb3 	bl	8005d64 <xTaskRemoveFromEventList>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d013      	beq.n	8004e2c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e04:	4b3f      	ldr	r3, [pc, #252]	; (8004f04 <xQueueGenericSend+0x1f0>)
 8004e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	e00a      	b.n	8004e2c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e1c:	4b39      	ldr	r3, [pc, #228]	; (8004f04 <xQueueGenericSend+0x1f0>)
 8004e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e2c:	f001 fecc 	bl	8006bc8 <vPortExitCritical>
				return pdPASS;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e063      	b.n	8004efc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d103      	bne.n	8004e42 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e3a:	f001 fec5 	bl	8006bc8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e05c      	b.n	8004efc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d106      	bne.n	8004e56 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e48:	f107 0314 	add.w	r3, r7, #20
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 ffeb 	bl	8005e28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e52:	2301      	movs	r3, #1
 8004e54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e56:	f001 feb7 	bl	8006bc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e5a:	f000 fd67 	bl	800592c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e5e:	f001 fe85 	bl	8006b6c <vPortEnterCritical>
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e68:	b25b      	sxtb	r3, r3
 8004e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e6e:	d103      	bne.n	8004e78 <xQueueGenericSend+0x164>
 8004e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e7e:	b25b      	sxtb	r3, r3
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e84:	d103      	bne.n	8004e8e <xQueueGenericSend+0x17a>
 8004e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e8e:	f001 fe9b 	bl	8006bc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e92:	1d3a      	adds	r2, r7, #4
 8004e94:	f107 0314 	add.w	r3, r7, #20
 8004e98:	4611      	mov	r1, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 ffda 	bl	8005e54 <xTaskCheckForTimeOut>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d124      	bne.n	8004ef0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ea6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ea8:	f000 fa96 	bl	80053d8 <prvIsQueueFull>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d018      	beq.n	8004ee4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb4:	3310      	adds	r3, #16
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	4611      	mov	r1, r2
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 ff04 	bl	8005cc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ec2:	f000 fa21 	bl	8005308 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ec6:	f000 fd3f 	bl	8005948 <xTaskResumeAll>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f47f af7c 	bne.w	8004dca <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004ed2:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <xQueueGenericSend+0x1f0>)
 8004ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	e772      	b.n	8004dca <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ee6:	f000 fa0f 	bl	8005308 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004eea:	f000 fd2d 	bl	8005948 <xTaskResumeAll>
 8004eee:	e76c      	b.n	8004dca <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ef2:	f000 fa09 	bl	8005308 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ef6:	f000 fd27 	bl	8005948 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004efa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3738      	adds	r7, #56	; 0x38
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	e000ed04 	.word	0xe000ed04

08004f08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08e      	sub	sp, #56	; 0x38
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d109      	bne.n	8004f34 <xQueueGenericSendFromISR+0x2c>
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24
 8004f32:	e7fe      	b.n	8004f32 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d103      	bne.n	8004f42 <xQueueGenericSendFromISR+0x3a>
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <xQueueGenericSendFromISR+0x3e>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <xQueueGenericSendFromISR+0x40>
 8004f46:	2300      	movs	r3, #0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d109      	bne.n	8004f60 <xQueueGenericSendFromISR+0x58>
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	623b      	str	r3, [r7, #32]
 8004f5e:	e7fe      	b.n	8004f5e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d103      	bne.n	8004f6e <xQueueGenericSendFromISR+0x66>
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d101      	bne.n	8004f72 <xQueueGenericSendFromISR+0x6a>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <xQueueGenericSendFromISR+0x6c>
 8004f72:	2300      	movs	r3, #0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d109      	bne.n	8004f8c <xQueueGenericSendFromISR+0x84>
 8004f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	e7fe      	b.n	8004f8a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f8c:	f001 feca 	bl	8006d24 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f90:	f3ef 8211 	mrs	r2, BASEPRI
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	61ba      	str	r2, [r7, #24]
 8004fa6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004fa8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004faa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d302      	bcc.n	8004fbe <xQueueGenericSendFromISR+0xb6>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d12c      	bne.n	8005018 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fce:	f000 f90b 	bl	80051e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004fd2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fda:	d112      	bne.n	8005002 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d016      	beq.n	8005012 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	3324      	adds	r3, #36	; 0x24
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 febb 	bl	8005d64 <xTaskRemoveFromEventList>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00e      	beq.n	8005012 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00b      	beq.n	8005012 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	e007      	b.n	8005012 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005002:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005006:	3301      	adds	r3, #1
 8005008:	b2db      	uxtb	r3, r3
 800500a:	b25a      	sxtb	r2, r3
 800500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005012:	2301      	movs	r3, #1
 8005014:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005016:	e001      	b.n	800501c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005018:	2300      	movs	r3, #0
 800501a:	637b      	str	r3, [r7, #52]	; 0x34
 800501c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005028:	4618      	mov	r0, r3
 800502a:	3738      	adds	r7, #56	; 0x38
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08c      	sub	sp, #48	; 0x30
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800503c:	2300      	movs	r3, #0
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005046:	2b00      	cmp	r3, #0
 8005048:	d109      	bne.n	800505e <xQueueReceive+0x2e>
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	623b      	str	r3, [r7, #32]
 800505c:	e7fe      	b.n	800505c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d103      	bne.n	800506c <xQueueReceive+0x3c>
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <xQueueReceive+0x40>
 800506c:	2301      	movs	r3, #1
 800506e:	e000      	b.n	8005072 <xQueueReceive+0x42>
 8005070:	2300      	movs	r3, #0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <xQueueReceive+0x5a>
 8005076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	61fb      	str	r3, [r7, #28]
 8005088:	e7fe      	b.n	8005088 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800508a:	f001 f821 	bl	80060d0 <xTaskGetSchedulerState>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d102      	bne.n	800509a <xQueueReceive+0x6a>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <xQueueReceive+0x6e>
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <xQueueReceive+0x70>
 800509e:	2300      	movs	r3, #0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d109      	bne.n	80050b8 <xQueueReceive+0x88>
 80050a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	e7fe      	b.n	80050b6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050b8:	f001 fd58 	bl	8006b6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01f      	beq.n	8005108 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050c8:	68b9      	ldr	r1, [r7, #8]
 80050ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050cc:	f000 f8f6 	bl	80052bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	1e5a      	subs	r2, r3, #1
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00f      	beq.n	8005100 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e2:	3310      	adds	r3, #16
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 fe3d 	bl	8005d64 <xTaskRemoveFromEventList>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80050f0:	4b3c      	ldr	r3, [pc, #240]	; (80051e4 <xQueueReceive+0x1b4>)
 80050f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005100:	f001 fd62 	bl	8006bc8 <vPortExitCritical>
				return pdPASS;
 8005104:	2301      	movs	r3, #1
 8005106:	e069      	b.n	80051dc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d103      	bne.n	8005116 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800510e:	f001 fd5b 	bl	8006bc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005112:	2300      	movs	r3, #0
 8005114:	e062      	b.n	80051dc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005118:	2b00      	cmp	r3, #0
 800511a:	d106      	bne.n	800512a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800511c:	f107 0310 	add.w	r3, r7, #16
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fe81 	bl	8005e28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005126:	2301      	movs	r3, #1
 8005128:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800512a:	f001 fd4d 	bl	8006bc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800512e:	f000 fbfd 	bl	800592c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005132:	f001 fd1b 	bl	8006b6c <vPortEnterCritical>
 8005136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005138:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800513c:	b25b      	sxtb	r3, r3
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005142:	d103      	bne.n	800514c <xQueueReceive+0x11c>
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005152:	b25b      	sxtb	r3, r3
 8005154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005158:	d103      	bne.n	8005162 <xQueueReceive+0x132>
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005162:	f001 fd31 	bl	8006bc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005166:	1d3a      	adds	r2, r7, #4
 8005168:	f107 0310 	add.w	r3, r7, #16
 800516c:	4611      	mov	r1, r2
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fe70 	bl	8005e54 <xTaskCheckForTimeOut>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d123      	bne.n	80051c2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800517a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800517c:	f000 f916 	bl	80053ac <prvIsQueueEmpty>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d017      	beq.n	80051b6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005188:	3324      	adds	r3, #36	; 0x24
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	4611      	mov	r1, r2
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fd9a 	bl	8005cc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005196:	f000 f8b7 	bl	8005308 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800519a:	f000 fbd5 	bl	8005948 <xTaskResumeAll>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d189      	bne.n	80050b8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80051a4:	4b0f      	ldr	r3, [pc, #60]	; (80051e4 <xQueueReceive+0x1b4>)
 80051a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	e780      	b.n	80050b8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80051b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051b8:	f000 f8a6 	bl	8005308 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051bc:	f000 fbc4 	bl	8005948 <xTaskResumeAll>
 80051c0:	e77a      	b.n	80050b8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80051c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051c4:	f000 f8a0 	bl	8005308 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051c8:	f000 fbbe 	bl	8005948 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051ce:	f000 f8ed 	bl	80053ac <prvIsQueueEmpty>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f43f af6f 	beq.w	80050b8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80051da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3730      	adds	r7, #48	; 0x30
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	e000ed04 	.word	0xe000ed04

080051e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10d      	bne.n	8005222 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d14d      	bne.n	80052aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	4618      	mov	r0, r3
 8005214:	f000 ff7a 	bl	800610c <xTaskPriorityDisinherit>
 8005218:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	609a      	str	r2, [r3, #8]
 8005220:	e043      	b.n	80052aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d119      	bne.n	800525c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6858      	ldr	r0, [r3, #4]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	461a      	mov	r2, r3
 8005232:	68b9      	ldr	r1, [r7, #8]
 8005234:	f001 ffae 	bl	8007194 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	441a      	add	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	429a      	cmp	r2, r3
 8005250:	d32b      	bcc.n	80052aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	605a      	str	r2, [r3, #4]
 800525a:	e026      	b.n	80052aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	68d8      	ldr	r0, [r3, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	461a      	mov	r2, r3
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	f001 ff94 	bl	8007194 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	425b      	negs	r3, r3
 8005276:	441a      	add	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d207      	bcs.n	8005298 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	425b      	negs	r3, r3
 8005292:	441a      	add	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b02      	cmp	r3, #2
 800529c:	d105      	bne.n	80052aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80052b2:	697b      	ldr	r3, [r7, #20]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d018      	beq.n	8005300 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	441a      	add	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d303      	bcc.n	80052f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68d9      	ldr	r1, [r3, #12]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f8:	461a      	mov	r2, r3
 80052fa:	6838      	ldr	r0, [r7, #0]
 80052fc:	f001 ff4a 	bl	8007194 <memcpy>
	}
}
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005310:	f001 fc2c 	bl	8006b6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800531a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800531c:	e011      	b.n	8005342 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	2b00      	cmp	r3, #0
 8005324:	d012      	beq.n	800534c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	3324      	adds	r3, #36	; 0x24
 800532a:	4618      	mov	r0, r3
 800532c:	f000 fd1a 	bl	8005d64 <xTaskRemoveFromEventList>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005336:	f000 fded 	bl	8005f14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800533a:	7bfb      	ldrb	r3, [r7, #15]
 800533c:	3b01      	subs	r3, #1
 800533e:	b2db      	uxtb	r3, r3
 8005340:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005346:	2b00      	cmp	r3, #0
 8005348:	dce9      	bgt.n	800531e <prvUnlockQueue+0x16>
 800534a:	e000      	b.n	800534e <prvUnlockQueue+0x46>
					break;
 800534c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	22ff      	movs	r2, #255	; 0xff
 8005352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005356:	f001 fc37 	bl	8006bc8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800535a:	f001 fc07 	bl	8006b6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005364:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005366:	e011      	b.n	800538c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d012      	beq.n	8005396 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3310      	adds	r3, #16
 8005374:	4618      	mov	r0, r3
 8005376:	f000 fcf5 	bl	8005d64 <xTaskRemoveFromEventList>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005380:	f000 fdc8 	bl	8005f14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005384:	7bbb      	ldrb	r3, [r7, #14]
 8005386:	3b01      	subs	r3, #1
 8005388:	b2db      	uxtb	r3, r3
 800538a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800538c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005390:	2b00      	cmp	r3, #0
 8005392:	dce9      	bgt.n	8005368 <prvUnlockQueue+0x60>
 8005394:	e000      	b.n	8005398 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005396:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	22ff      	movs	r2, #255	; 0xff
 800539c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80053a0:	f001 fc12 	bl	8006bc8 <vPortExitCritical>
}
 80053a4:	bf00      	nop
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053b4:	f001 fbda 	bl	8006b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d102      	bne.n	80053c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80053c0:	2301      	movs	r3, #1
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	e001      	b.n	80053ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053ca:	f001 fbfd 	bl	8006bc8 <vPortExitCritical>

	return xReturn;
 80053ce:	68fb      	ldr	r3, [r7, #12]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053e0:	f001 fbc4 	bl	8006b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d102      	bne.n	80053f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80053f0:	2301      	movs	r3, #1
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	e001      	b.n	80053fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80053f6:	2300      	movs	r3, #0
 80053f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053fa:	f001 fbe5 	bl	8006bc8 <vPortExitCritical>

	return xReturn;
 80053fe:	68fb      	ldr	r3, [r7, #12]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	e014      	b.n	8005442 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005418:	4a0e      	ldr	r2, [pc, #56]	; (8005454 <vQueueAddToRegistry+0x4c>)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10b      	bne.n	800543c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005424:	490b      	ldr	r1, [pc, #44]	; (8005454 <vQueueAddToRegistry+0x4c>)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800542e:	4a09      	ldr	r2, [pc, #36]	; (8005454 <vQueueAddToRegistry+0x4c>)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	4413      	add	r3, r2
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800543a:	e005      	b.n	8005448 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3301      	adds	r3, #1
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b07      	cmp	r3, #7
 8005446:	d9e7      	bls.n	8005418 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005448:	bf00      	nop
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	20001d7c 	.word	0x20001d7c

08005458 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005468:	f001 fb80 	bl	8006b6c <vPortEnterCritical>
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005472:	b25b      	sxtb	r3, r3
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005478:	d103      	bne.n	8005482 <vQueueWaitForMessageRestricted+0x2a>
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005488:	b25b      	sxtb	r3, r3
 800548a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800548e:	d103      	bne.n	8005498 <vQueueWaitForMessageRestricted+0x40>
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005498:	f001 fb96 	bl	8006bc8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d106      	bne.n	80054b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	3324      	adds	r3, #36	; 0x24
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 fc2f 	bl	8005d10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80054b2:	6978      	ldr	r0, [r7, #20]
 80054b4:	f7ff ff28 	bl	8005308 <prvUnlockQueue>
	}
 80054b8:	bf00      	nop
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b08e      	sub	sp, #56	; 0x38
 80054c4:	af04      	add	r7, sp, #16
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <xTaskCreateStatic+0x28>
 80054d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	623b      	str	r3, [r7, #32]
 80054e6:	e7fe      	b.n	80054e6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80054e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d109      	bne.n	8005502 <xTaskCreateStatic+0x42>
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	61fb      	str	r3, [r7, #28]
 8005500:	e7fe      	b.n	8005500 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005502:	235c      	movs	r3, #92	; 0x5c
 8005504:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b5c      	cmp	r3, #92	; 0x5c
 800550a:	d009      	beq.n	8005520 <xTaskCreateStatic+0x60>
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	61bb      	str	r3, [r7, #24]
 800551e:	e7fe      	b.n	800551e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005520:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01e      	beq.n	8005566 <xTaskCreateStatic+0xa6>
 8005528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552a:	2b00      	cmp	r3, #0
 800552c:	d01b      	beq.n	8005566 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005536:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	2202      	movs	r2, #2
 800553c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005540:	2300      	movs	r3, #0
 8005542:	9303      	str	r3, [sp, #12]
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	9302      	str	r3, [sp, #8]
 8005548:	f107 0314 	add.w	r3, r7, #20
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	68b9      	ldr	r1, [r7, #8]
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 f850 	bl	80055fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800555e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005560:	f000 f8dc 	bl	800571c <prvAddNewTaskToReadyList>
 8005564:	e001      	b.n	800556a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005566:	2300      	movs	r3, #0
 8005568:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800556a:	697b      	ldr	r3, [r7, #20]
	}
 800556c:	4618      	mov	r0, r3
 800556e:	3728      	adds	r7, #40	; 0x28
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005574:	b580      	push	{r7, lr}
 8005576:	b08c      	sub	sp, #48	; 0x30
 8005578:	af04      	add	r7, sp, #16
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	4613      	mov	r3, r2
 8005582:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005584:	88fb      	ldrh	r3, [r7, #6]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4618      	mov	r0, r3
 800558a:	f001 fc09 	bl	8006da0 <pvPortMalloc>
 800558e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00e      	beq.n	80055b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005596:	205c      	movs	r0, #92	; 0x5c
 8005598:	f001 fc02 	bl	8006da0 <pvPortMalloc>
 800559c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d003      	beq.n	80055ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	631a      	str	r2, [r3, #48]	; 0x30
 80055aa:	e005      	b.n	80055b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055ac:	6978      	ldr	r0, [r7, #20]
 80055ae:	f001 fcb9 	bl	8006f24 <vPortFree>
 80055b2:	e001      	b.n	80055b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d017      	beq.n	80055ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055c6:	88fa      	ldrh	r2, [r7, #6]
 80055c8:	2300      	movs	r3, #0
 80055ca:	9303      	str	r3, [sp, #12]
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	9302      	str	r3, [sp, #8]
 80055d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d2:	9301      	str	r3, [sp, #4]
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 f80e 	bl	80055fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055e2:	69f8      	ldr	r0, [r7, #28]
 80055e4:	f000 f89a 	bl	800571c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055e8:	2301      	movs	r3, #1
 80055ea:	61bb      	str	r3, [r7, #24]
 80055ec:	e002      	b.n	80055f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055f4:	69bb      	ldr	r3, [r7, #24]
	}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3720      	adds	r7, #32
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b088      	sub	sp, #32
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	607a      	str	r2, [r7, #4]
 800560a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	461a      	mov	r2, r3
 8005616:	21a5      	movs	r1, #165	; 0xa5
 8005618:	f001 fdc7 	bl	80071aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005626:	3b01      	subs	r3, #1
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	f023 0307 	bic.w	r3, r3, #7
 8005634:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	2b00      	cmp	r3, #0
 800563e:	d009      	beq.n	8005654 <prvInitialiseNewTask+0x56>
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	e7fe      	b.n	8005652 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d01f      	beq.n	800569a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800565a:	2300      	movs	r3, #0
 800565c:	61fb      	str	r3, [r7, #28]
 800565e:	e012      	b.n	8005686 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	4413      	add	r3, r2
 8005666:	7819      	ldrb	r1, [r3, #0]
 8005668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	4413      	add	r3, r2
 800566e:	3334      	adds	r3, #52	; 0x34
 8005670:	460a      	mov	r2, r1
 8005672:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	4413      	add	r3, r2
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d006      	beq.n	800568e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	3301      	adds	r3, #1
 8005684:	61fb      	str	r3, [r7, #28]
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	2b0f      	cmp	r3, #15
 800568a:	d9e9      	bls.n	8005660 <prvInitialiseNewTask+0x62>
 800568c:	e000      	b.n	8005690 <prvInitialiseNewTask+0x92>
			{
				break;
 800568e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005698:	e003      	b.n	80056a2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	2b37      	cmp	r3, #55	; 0x37
 80056a6:	d901      	bls.n	80056ac <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056a8:	2337      	movs	r3, #55	; 0x37
 80056aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	2200      	movs	r2, #0
 80056bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c0:	3304      	adds	r3, #4
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7ff f994 	bl	80049f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	3318      	adds	r3, #24
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff f98f 	bl	80049f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	2200      	movs	r2, #0
 80056ec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	68f9      	ldr	r1, [r7, #12]
 80056fa:	69b8      	ldr	r0, [r7, #24]
 80056fc:	f001 f90c 	bl	8006918 <pxPortInitialiseStack>
 8005700:	4602      	mov	r2, r0
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800570c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005710:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005712:	bf00      	nop
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005724:	f001 fa22 	bl	8006b6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005728:	4b2d      	ldr	r3, [pc, #180]	; (80057e0 <prvAddNewTaskToReadyList+0xc4>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3301      	adds	r3, #1
 800572e:	4a2c      	ldr	r2, [pc, #176]	; (80057e0 <prvAddNewTaskToReadyList+0xc4>)
 8005730:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005732:	4b2c      	ldr	r3, [pc, #176]	; (80057e4 <prvAddNewTaskToReadyList+0xc8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d109      	bne.n	800574e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800573a:	4a2a      	ldr	r2, [pc, #168]	; (80057e4 <prvAddNewTaskToReadyList+0xc8>)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005740:	4b27      	ldr	r3, [pc, #156]	; (80057e0 <prvAddNewTaskToReadyList+0xc4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d110      	bne.n	800576a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005748:	f000 fc08 	bl	8005f5c <prvInitialiseTaskLists>
 800574c:	e00d      	b.n	800576a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800574e:	4b26      	ldr	r3, [pc, #152]	; (80057e8 <prvAddNewTaskToReadyList+0xcc>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d109      	bne.n	800576a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005756:	4b23      	ldr	r3, [pc, #140]	; (80057e4 <prvAddNewTaskToReadyList+0xc8>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	429a      	cmp	r2, r3
 8005762:	d802      	bhi.n	800576a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005764:	4a1f      	ldr	r2, [pc, #124]	; (80057e4 <prvAddNewTaskToReadyList+0xc8>)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800576a:	4b20      	ldr	r3, [pc, #128]	; (80057ec <prvAddNewTaskToReadyList+0xd0>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3301      	adds	r3, #1
 8005770:	4a1e      	ldr	r2, [pc, #120]	; (80057ec <prvAddNewTaskToReadyList+0xd0>)
 8005772:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005774:	4b1d      	ldr	r3, [pc, #116]	; (80057ec <prvAddNewTaskToReadyList+0xd0>)
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005780:	4b1b      	ldr	r3, [pc, #108]	; (80057f0 <prvAddNewTaskToReadyList+0xd4>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	429a      	cmp	r2, r3
 8005786:	d903      	bls.n	8005790 <prvAddNewTaskToReadyList+0x74>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578c:	4a18      	ldr	r2, [pc, #96]	; (80057f0 <prvAddNewTaskToReadyList+0xd4>)
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4a15      	ldr	r2, [pc, #84]	; (80057f4 <prvAddNewTaskToReadyList+0xd8>)
 800579e:	441a      	add	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3304      	adds	r3, #4
 80057a4:	4619      	mov	r1, r3
 80057a6:	4610      	mov	r0, r2
 80057a8:	f7ff f92f 	bl	8004a0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057ac:	f001 fa0c 	bl	8006bc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057b0:	4b0d      	ldr	r3, [pc, #52]	; (80057e8 <prvAddNewTaskToReadyList+0xcc>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00e      	beq.n	80057d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057b8:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <prvAddNewTaskToReadyList+0xc8>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d207      	bcs.n	80057d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057c6:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <prvAddNewTaskToReadyList+0xdc>)
 80057c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057d6:	bf00      	nop
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	20000bbc 	.word	0x20000bbc
 80057e4:	200006e8 	.word	0x200006e8
 80057e8:	20000bc8 	.word	0x20000bc8
 80057ec:	20000bd8 	.word	0x20000bd8
 80057f0:	20000bc4 	.word	0x20000bc4
 80057f4:	200006ec 	.word	0x200006ec
 80057f8:	e000ed04 	.word	0xe000ed04

080057fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d016      	beq.n	800583c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800580e:	4b13      	ldr	r3, [pc, #76]	; (800585c <vTaskDelay+0x60>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d009      	beq.n	800582a <vTaskDelay+0x2e>
 8005816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	60bb      	str	r3, [r7, #8]
 8005828:	e7fe      	b.n	8005828 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800582a:	f000 f87f 	bl	800592c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800582e:	2100      	movs	r1, #0
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fcd7 	bl	80061e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005836:	f000 f887 	bl	8005948 <xTaskResumeAll>
 800583a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d107      	bne.n	8005852 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005842:	4b07      	ldr	r3, [pc, #28]	; (8005860 <vTaskDelay+0x64>)
 8005844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	20000be4 	.word	0x20000be4
 8005860:	e000ed04 	.word	0xe000ed04

08005864 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08a      	sub	sp, #40	; 0x28
 8005868:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800586a:	2300      	movs	r3, #0
 800586c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800586e:	2300      	movs	r3, #0
 8005870:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005872:	463a      	mov	r2, r7
 8005874:	1d39      	adds	r1, r7, #4
 8005876:	f107 0308 	add.w	r3, r7, #8
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff f864 	bl	8004948 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005880:	6839      	ldr	r1, [r7, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	9202      	str	r2, [sp, #8]
 8005888:	9301      	str	r3, [sp, #4]
 800588a:	2300      	movs	r3, #0
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	2300      	movs	r3, #0
 8005890:	460a      	mov	r2, r1
 8005892:	4920      	ldr	r1, [pc, #128]	; (8005914 <vTaskStartScheduler+0xb0>)
 8005894:	4820      	ldr	r0, [pc, #128]	; (8005918 <vTaskStartScheduler+0xb4>)
 8005896:	f7ff fe13 	bl	80054c0 <xTaskCreateStatic>
 800589a:	4602      	mov	r2, r0
 800589c:	4b1f      	ldr	r3, [pc, #124]	; (800591c <vTaskStartScheduler+0xb8>)
 800589e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058a0:	4b1e      	ldr	r3, [pc, #120]	; (800591c <vTaskStartScheduler+0xb8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058a8:	2301      	movs	r3, #1
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	e001      	b.n	80058b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d102      	bne.n	80058be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80058b8:	f000 fce8 	bl	800628c <xTimerCreateTimerTask>
 80058bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d115      	bne.n	80058f0 <vTaskStartScheduler+0x8c>
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058d6:	4b12      	ldr	r3, [pc, #72]	; (8005920 <vTaskStartScheduler+0xbc>)
 80058d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058de:	4b11      	ldr	r3, [pc, #68]	; (8005924 <vTaskStartScheduler+0xc0>)
 80058e0:	2201      	movs	r2, #1
 80058e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058e4:	4b10      	ldr	r3, [pc, #64]	; (8005928 <vTaskStartScheduler+0xc4>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058ea:	f001 f8a1 	bl	8006a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058ee:	e00d      	b.n	800590c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058f6:	d109      	bne.n	800590c <vTaskStartScheduler+0xa8>
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	e7fe      	b.n	800590a <vTaskStartScheduler+0xa6>
}
 800590c:	bf00      	nop
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	080071f0 	.word	0x080071f0
 8005918:	08005f2d 	.word	0x08005f2d
 800591c:	20000be0 	.word	0x20000be0
 8005920:	20000bdc 	.word	0x20000bdc
 8005924:	20000bc8 	.word	0x20000bc8
 8005928:	20000bc0 	.word	0x20000bc0

0800592c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005930:	4b04      	ldr	r3, [pc, #16]	; (8005944 <vTaskSuspendAll+0x18>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	4a03      	ldr	r2, [pc, #12]	; (8005944 <vTaskSuspendAll+0x18>)
 8005938:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800593a:	bf00      	nop
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	20000be4 	.word	0x20000be4

08005948 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005952:	2300      	movs	r3, #0
 8005954:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005956:	4b41      	ldr	r3, [pc, #260]	; (8005a5c <xTaskResumeAll+0x114>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d109      	bne.n	8005972 <xTaskResumeAll+0x2a>
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	e7fe      	b.n	8005970 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005972:	f001 f8fb 	bl	8006b6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005976:	4b39      	ldr	r3, [pc, #228]	; (8005a5c <xTaskResumeAll+0x114>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3b01      	subs	r3, #1
 800597c:	4a37      	ldr	r2, [pc, #220]	; (8005a5c <xTaskResumeAll+0x114>)
 800597e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005980:	4b36      	ldr	r3, [pc, #216]	; (8005a5c <xTaskResumeAll+0x114>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d162      	bne.n	8005a4e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005988:	4b35      	ldr	r3, [pc, #212]	; (8005a60 <xTaskResumeAll+0x118>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d05e      	beq.n	8005a4e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005990:	e02f      	b.n	80059f2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005992:	4b34      	ldr	r3, [pc, #208]	; (8005a64 <xTaskResumeAll+0x11c>)
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	3318      	adds	r3, #24
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff f890 	bl	8004ac4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3304      	adds	r3, #4
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7ff f88b 	bl	8004ac4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b2:	4b2d      	ldr	r3, [pc, #180]	; (8005a68 <xTaskResumeAll+0x120>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d903      	bls.n	80059c2 <xTaskResumeAll+0x7a>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	4a2a      	ldr	r2, [pc, #168]	; (8005a68 <xTaskResumeAll+0x120>)
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4a27      	ldr	r2, [pc, #156]	; (8005a6c <xTaskResumeAll+0x124>)
 80059d0:	441a      	add	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3304      	adds	r3, #4
 80059d6:	4619      	mov	r1, r3
 80059d8:	4610      	mov	r0, r2
 80059da:	f7ff f816 	bl	8004a0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e2:	4b23      	ldr	r3, [pc, #140]	; (8005a70 <xTaskResumeAll+0x128>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d302      	bcc.n	80059f2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80059ec:	4b21      	ldr	r3, [pc, #132]	; (8005a74 <xTaskResumeAll+0x12c>)
 80059ee:	2201      	movs	r2, #1
 80059f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059f2:	4b1c      	ldr	r3, [pc, #112]	; (8005a64 <xTaskResumeAll+0x11c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1cb      	bne.n	8005992 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a00:	f000 fb46 	bl	8006090 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005a04:	4b1c      	ldr	r3, [pc, #112]	; (8005a78 <xTaskResumeAll+0x130>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d010      	beq.n	8005a32 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a10:	f000 f846 	bl	8005aa0 <xTaskIncrementTick>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005a1a:	4b16      	ldr	r3, [pc, #88]	; (8005a74 <xTaskResumeAll+0x12c>)
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1f1      	bne.n	8005a10 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005a2c:	4b12      	ldr	r3, [pc, #72]	; (8005a78 <xTaskResumeAll+0x130>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a32:	4b10      	ldr	r3, [pc, #64]	; (8005a74 <xTaskResumeAll+0x12c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d009      	beq.n	8005a4e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a3e:	4b0f      	ldr	r3, [pc, #60]	; (8005a7c <xTaskResumeAll+0x134>)
 8005a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a4e:	f001 f8bb 	bl	8006bc8 <vPortExitCritical>

	return xAlreadyYielded;
 8005a52:	68bb      	ldr	r3, [r7, #8]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20000be4 	.word	0x20000be4
 8005a60:	20000bbc 	.word	0x20000bbc
 8005a64:	20000b7c 	.word	0x20000b7c
 8005a68:	20000bc4 	.word	0x20000bc4
 8005a6c:	200006ec 	.word	0x200006ec
 8005a70:	200006e8 	.word	0x200006e8
 8005a74:	20000bd0 	.word	0x20000bd0
 8005a78:	20000bcc 	.word	0x20000bcc
 8005a7c:	e000ed04 	.word	0xe000ed04

08005a80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a86:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <xTaskGetTickCount+0x1c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a8c:	687b      	ldr	r3, [r7, #4]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	20000bc0 	.word	0x20000bc0

08005aa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aaa:	4b4e      	ldr	r3, [pc, #312]	; (8005be4 <xTaskIncrementTick+0x144>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f040 8088 	bne.w	8005bc4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ab4:	4b4c      	ldr	r3, [pc, #304]	; (8005be8 <xTaskIncrementTick+0x148>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005abc:	4a4a      	ldr	r2, [pc, #296]	; (8005be8 <xTaskIncrementTick+0x148>)
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d11f      	bne.n	8005b08 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ac8:	4b48      	ldr	r3, [pc, #288]	; (8005bec <xTaskIncrementTick+0x14c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d009      	beq.n	8005ae6 <xTaskIncrementTick+0x46>
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	603b      	str	r3, [r7, #0]
 8005ae4:	e7fe      	b.n	8005ae4 <xTaskIncrementTick+0x44>
 8005ae6:	4b41      	ldr	r3, [pc, #260]	; (8005bec <xTaskIncrementTick+0x14c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	4b40      	ldr	r3, [pc, #256]	; (8005bf0 <xTaskIncrementTick+0x150>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a3e      	ldr	r2, [pc, #248]	; (8005bec <xTaskIncrementTick+0x14c>)
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	4a3e      	ldr	r2, [pc, #248]	; (8005bf0 <xTaskIncrementTick+0x150>)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	4b3e      	ldr	r3, [pc, #248]	; (8005bf4 <xTaskIncrementTick+0x154>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3301      	adds	r3, #1
 8005b00:	4a3c      	ldr	r2, [pc, #240]	; (8005bf4 <xTaskIncrementTick+0x154>)
 8005b02:	6013      	str	r3, [r2, #0]
 8005b04:	f000 fac4 	bl	8006090 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b08:	4b3b      	ldr	r3, [pc, #236]	; (8005bf8 <xTaskIncrementTick+0x158>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d349      	bcc.n	8005ba6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b12:	4b36      	ldr	r3, [pc, #216]	; (8005bec <xTaskIncrementTick+0x14c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d104      	bne.n	8005b26 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b1c:	4b36      	ldr	r3, [pc, #216]	; (8005bf8 <xTaskIncrementTick+0x158>)
 8005b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b22:	601a      	str	r2, [r3, #0]
					break;
 8005b24:	e03f      	b.n	8005ba6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b26:	4b31      	ldr	r3, [pc, #196]	; (8005bec <xTaskIncrementTick+0x14c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d203      	bcs.n	8005b46 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b3e:	4a2e      	ldr	r2, [pc, #184]	; (8005bf8 <xTaskIncrementTick+0x158>)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b44:	e02f      	b.n	8005ba6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	3304      	adds	r3, #4
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fe ffba 	bl	8004ac4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d004      	beq.n	8005b62 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	3318      	adds	r3, #24
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fe ffb1 	bl	8004ac4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b66:	4b25      	ldr	r3, [pc, #148]	; (8005bfc <xTaskIncrementTick+0x15c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d903      	bls.n	8005b76 <xTaskIncrementTick+0xd6>
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	4a22      	ldr	r2, [pc, #136]	; (8005bfc <xTaskIncrementTick+0x15c>)
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4a1f      	ldr	r2, [pc, #124]	; (8005c00 <xTaskIncrementTick+0x160>)
 8005b84:	441a      	add	r2, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	f7fe ff3c 	bl	8004a0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b96:	4b1b      	ldr	r3, [pc, #108]	; (8005c04 <xTaskIncrementTick+0x164>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d3b8      	bcc.n	8005b12 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ba4:	e7b5      	b.n	8005b12 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ba6:	4b17      	ldr	r3, [pc, #92]	; (8005c04 <xTaskIncrementTick+0x164>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bac:	4914      	ldr	r1, [pc, #80]	; (8005c00 <xTaskIncrementTick+0x160>)
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	440b      	add	r3, r1
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d907      	bls.n	8005bce <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	e004      	b.n	8005bce <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005bc4:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <xTaskIncrementTick+0x168>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	4a0f      	ldr	r2, [pc, #60]	; (8005c08 <xTaskIncrementTick+0x168>)
 8005bcc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005bce:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <xTaskIncrementTick+0x16c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005bda:	697b      	ldr	r3, [r7, #20]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	20000be4 	.word	0x20000be4
 8005be8:	20000bc0 	.word	0x20000bc0
 8005bec:	20000b74 	.word	0x20000b74
 8005bf0:	20000b78 	.word	0x20000b78
 8005bf4:	20000bd4 	.word	0x20000bd4
 8005bf8:	20000bdc 	.word	0x20000bdc
 8005bfc:	20000bc4 	.word	0x20000bc4
 8005c00:	200006ec 	.word	0x200006ec
 8005c04:	200006e8 	.word	0x200006e8
 8005c08:	20000bcc 	.word	0x20000bcc
 8005c0c:	20000bd0 	.word	0x20000bd0

08005c10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c16:	4b27      	ldr	r3, [pc, #156]	; (8005cb4 <vTaskSwitchContext+0xa4>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c1e:	4b26      	ldr	r3, [pc, #152]	; (8005cb8 <vTaskSwitchContext+0xa8>)
 8005c20:	2201      	movs	r2, #1
 8005c22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c24:	e040      	b.n	8005ca8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005c26:	4b24      	ldr	r3, [pc, #144]	; (8005cb8 <vTaskSwitchContext+0xa8>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c2c:	4b23      	ldr	r3, [pc, #140]	; (8005cbc <vTaskSwitchContext+0xac>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	e00f      	b.n	8005c54 <vTaskSwitchContext+0x44>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d109      	bne.n	8005c4e <vTaskSwitchContext+0x3e>
 8005c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	607b      	str	r3, [r7, #4]
 8005c4c:	e7fe      	b.n	8005c4c <vTaskSwitchContext+0x3c>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3b01      	subs	r3, #1
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	491a      	ldr	r1, [pc, #104]	; (8005cc0 <vTaskSwitchContext+0xb0>)
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	440b      	add	r3, r1
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d0e5      	beq.n	8005c34 <vTaskSwitchContext+0x24>
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4a13      	ldr	r2, [pc, #76]	; (8005cc0 <vTaskSwitchContext+0xb0>)
 8005c74:	4413      	add	r3, r2
 8005c76:	60bb      	str	r3, [r7, #8]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	605a      	str	r2, [r3, #4]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	3308      	adds	r3, #8
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d104      	bne.n	8005c98 <vTaskSwitchContext+0x88>
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	605a      	str	r2, [r3, #4]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	4a09      	ldr	r2, [pc, #36]	; (8005cc4 <vTaskSwitchContext+0xb4>)
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	4a06      	ldr	r2, [pc, #24]	; (8005cbc <vTaskSwitchContext+0xac>)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6013      	str	r3, [r2, #0]
}
 8005ca8:	bf00      	nop
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	20000be4 	.word	0x20000be4
 8005cb8:	20000bd0 	.word	0x20000bd0
 8005cbc:	20000bc4 	.word	0x20000bc4
 8005cc0:	200006ec 	.word	0x200006ec
 8005cc4:	200006e8 	.word	0x200006e8

08005cc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d109      	bne.n	8005cec <vTaskPlaceOnEventList+0x24>
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	e7fe      	b.n	8005cea <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cec:	4b07      	ldr	r3, [pc, #28]	; (8005d0c <vTaskPlaceOnEventList+0x44>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3318      	adds	r3, #24
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7fe feac 	bl	8004a52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	6838      	ldr	r0, [r7, #0]
 8005cfe:	f000 fa71 	bl	80061e4 <prvAddCurrentTaskToDelayedList>
}
 8005d02:	bf00      	nop
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	200006e8 	.word	0x200006e8

08005d10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d109      	bne.n	8005d36 <vTaskPlaceOnEventListRestricted+0x26>
 8005d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	e7fe      	b.n	8005d34 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d36:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <vTaskPlaceOnEventListRestricted+0x50>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3318      	adds	r3, #24
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f7fe fe63 	bl	8004a0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d50:	6879      	ldr	r1, [r7, #4]
 8005d52:	68b8      	ldr	r0, [r7, #8]
 8005d54:	f000 fa46 	bl	80061e4 <prvAddCurrentTaskToDelayedList>
	}
 8005d58:	bf00      	nop
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	200006e8 	.word	0x200006e8

08005d64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d109      	bne.n	8005d8e <xTaskRemoveFromEventList+0x2a>
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	e7fe      	b.n	8005d8c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	3318      	adds	r3, #24
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fe fe96 	bl	8004ac4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d98:	4b1d      	ldr	r3, [pc, #116]	; (8005e10 <xTaskRemoveFromEventList+0xac>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d11d      	bne.n	8005ddc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	3304      	adds	r3, #4
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7fe fe8d 	bl	8004ac4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dae:	4b19      	ldr	r3, [pc, #100]	; (8005e14 <xTaskRemoveFromEventList+0xb0>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d903      	bls.n	8005dbe <xTaskRemoveFromEventList+0x5a>
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dba:	4a16      	ldr	r2, [pc, #88]	; (8005e14 <xTaskRemoveFromEventList+0xb0>)
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4a13      	ldr	r2, [pc, #76]	; (8005e18 <xTaskRemoveFromEventList+0xb4>)
 8005dcc:	441a      	add	r2, r3
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	f7fe fe18 	bl	8004a0a <vListInsertEnd>
 8005dda:	e005      	b.n	8005de8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	3318      	adds	r3, #24
 8005de0:	4619      	mov	r1, r3
 8005de2:	480e      	ldr	r0, [pc, #56]	; (8005e1c <xTaskRemoveFromEventList+0xb8>)
 8005de4:	f7fe fe11 	bl	8004a0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dec:	4b0c      	ldr	r3, [pc, #48]	; (8005e20 <xTaskRemoveFromEventList+0xbc>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d905      	bls.n	8005e02 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005df6:	2301      	movs	r3, #1
 8005df8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005dfa:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <xTaskRemoveFromEventList+0xc0>)
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	e001      	b.n	8005e06 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005e02:	2300      	movs	r3, #0
 8005e04:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e06:	697b      	ldr	r3, [r7, #20]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3718      	adds	r7, #24
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	20000be4 	.word	0x20000be4
 8005e14:	20000bc4 	.word	0x20000bc4
 8005e18:	200006ec 	.word	0x200006ec
 8005e1c:	20000b7c 	.word	0x20000b7c
 8005e20:	200006e8 	.word	0x200006e8
 8005e24:	20000bd0 	.word	0x20000bd0

08005e28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e30:	4b06      	ldr	r3, [pc, #24]	; (8005e4c <vTaskInternalSetTimeOutState+0x24>)
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e38:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <vTaskInternalSetTimeOutState+0x28>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	605a      	str	r2, [r3, #4]
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	20000bd4 	.word	0x20000bd4
 8005e50:	20000bc0 	.word	0x20000bc0

08005e54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d109      	bne.n	8005e78 <xTaskCheckForTimeOut+0x24>
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	e7fe      	b.n	8005e76 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d109      	bne.n	8005e92 <xTaskCheckForTimeOut+0x3e>
 8005e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	e7fe      	b.n	8005e90 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005e92:	f000 fe6b 	bl	8006b6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e96:	4b1d      	ldr	r3, [pc, #116]	; (8005f0c <xTaskCheckForTimeOut+0xb8>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eae:	d102      	bne.n	8005eb6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61fb      	str	r3, [r7, #28]
 8005eb4:	e023      	b.n	8005efe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	4b15      	ldr	r3, [pc, #84]	; (8005f10 <xTaskCheckForTimeOut+0xbc>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d007      	beq.n	8005ed2 <xTaskCheckForTimeOut+0x7e>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d302      	bcc.n	8005ed2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	61fb      	str	r3, [r7, #28]
 8005ed0:	e015      	b.n	8005efe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d20b      	bcs.n	8005ef4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	1ad2      	subs	r2, r2, r3
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff ff9d 	bl	8005e28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61fb      	str	r3, [r7, #28]
 8005ef2:	e004      	b.n	8005efe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005efa:	2301      	movs	r3, #1
 8005efc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005efe:	f000 fe63 	bl	8006bc8 <vPortExitCritical>

	return xReturn;
 8005f02:	69fb      	ldr	r3, [r7, #28]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3720      	adds	r7, #32
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	20000bc0 	.word	0x20000bc0
 8005f10:	20000bd4 	.word	0x20000bd4

08005f14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f14:	b480      	push	{r7}
 8005f16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f18:	4b03      	ldr	r3, [pc, #12]	; (8005f28 <vTaskMissedYield+0x14>)
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	601a      	str	r2, [r3, #0]
}
 8005f1e:	bf00      	nop
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	20000bd0 	.word	0x20000bd0

08005f2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f34:	f000 f852 	bl	8005fdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f38:	4b06      	ldr	r3, [pc, #24]	; (8005f54 <prvIdleTask+0x28>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d9f9      	bls.n	8005f34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f40:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <prvIdleTask+0x2c>)
 8005f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	f3bf 8f4f 	dsb	sy
 8005f4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f50:	e7f0      	b.n	8005f34 <prvIdleTask+0x8>
 8005f52:	bf00      	nop
 8005f54:	200006ec 	.word	0x200006ec
 8005f58:	e000ed04 	.word	0xe000ed04

08005f5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f62:	2300      	movs	r3, #0
 8005f64:	607b      	str	r3, [r7, #4]
 8005f66:	e00c      	b.n	8005f82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4a12      	ldr	r2, [pc, #72]	; (8005fbc <prvInitialiseTaskLists+0x60>)
 8005f74:	4413      	add	r3, r2
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fe fd1a 	bl	80049b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	607b      	str	r3, [r7, #4]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b37      	cmp	r3, #55	; 0x37
 8005f86:	d9ef      	bls.n	8005f68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f88:	480d      	ldr	r0, [pc, #52]	; (8005fc0 <prvInitialiseTaskLists+0x64>)
 8005f8a:	f7fe fd11 	bl	80049b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f8e:	480d      	ldr	r0, [pc, #52]	; (8005fc4 <prvInitialiseTaskLists+0x68>)
 8005f90:	f7fe fd0e 	bl	80049b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f94:	480c      	ldr	r0, [pc, #48]	; (8005fc8 <prvInitialiseTaskLists+0x6c>)
 8005f96:	f7fe fd0b 	bl	80049b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f9a:	480c      	ldr	r0, [pc, #48]	; (8005fcc <prvInitialiseTaskLists+0x70>)
 8005f9c:	f7fe fd08 	bl	80049b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fa0:	480b      	ldr	r0, [pc, #44]	; (8005fd0 <prvInitialiseTaskLists+0x74>)
 8005fa2:	f7fe fd05 	bl	80049b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fa6:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <prvInitialiseTaskLists+0x78>)
 8005fa8:	4a05      	ldr	r2, [pc, #20]	; (8005fc0 <prvInitialiseTaskLists+0x64>)
 8005faa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fac:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <prvInitialiseTaskLists+0x7c>)
 8005fae:	4a05      	ldr	r2, [pc, #20]	; (8005fc4 <prvInitialiseTaskLists+0x68>)
 8005fb0:	601a      	str	r2, [r3, #0]
}
 8005fb2:	bf00      	nop
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	200006ec 	.word	0x200006ec
 8005fc0:	20000b4c 	.word	0x20000b4c
 8005fc4:	20000b60 	.word	0x20000b60
 8005fc8:	20000b7c 	.word	0x20000b7c
 8005fcc:	20000b90 	.word	0x20000b90
 8005fd0:	20000ba8 	.word	0x20000ba8
 8005fd4:	20000b74 	.word	0x20000b74
 8005fd8:	20000b78 	.word	0x20000b78

08005fdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fe2:	e019      	b.n	8006018 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fe4:	f000 fdc2 	bl	8006b6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe8:	4b0f      	ldr	r3, [pc, #60]	; (8006028 <prvCheckTasksWaitingTermination+0x4c>)
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fe fd65 	bl	8004ac4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ffa:	4b0c      	ldr	r3, [pc, #48]	; (800602c <prvCheckTasksWaitingTermination+0x50>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	4a0a      	ldr	r2, [pc, #40]	; (800602c <prvCheckTasksWaitingTermination+0x50>)
 8006002:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006004:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <prvCheckTasksWaitingTermination+0x54>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3b01      	subs	r3, #1
 800600a:	4a09      	ldr	r2, [pc, #36]	; (8006030 <prvCheckTasksWaitingTermination+0x54>)
 800600c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800600e:	f000 fddb 	bl	8006bc8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f80e 	bl	8006034 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006018:	4b05      	ldr	r3, [pc, #20]	; (8006030 <prvCheckTasksWaitingTermination+0x54>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1e1      	bne.n	8005fe4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006020:	bf00      	nop
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	20000b90 	.word	0x20000b90
 800602c:	20000bbc 	.word	0x20000bbc
 8006030:	20000ba4 	.word	0x20000ba4

08006034 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006042:	2b00      	cmp	r3, #0
 8006044:	d108      	bne.n	8006058 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604a:	4618      	mov	r0, r3
 800604c:	f000 ff6a 	bl	8006f24 <vPortFree>
				vPortFree( pxTCB );
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 ff67 	bl	8006f24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006056:	e017      	b.n	8006088 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800605e:	2b01      	cmp	r3, #1
 8006060:	d103      	bne.n	800606a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 ff5e 	bl	8006f24 <vPortFree>
	}
 8006068:	e00e      	b.n	8006088 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006070:	2b02      	cmp	r3, #2
 8006072:	d009      	beq.n	8006088 <prvDeleteTCB+0x54>
 8006074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	e7fe      	b.n	8006086 <prvDeleteTCB+0x52>
	}
 8006088:	bf00      	nop
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006096:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <prvResetNextTaskUnblockTime+0x38>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d104      	bne.n	80060aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060a0:	4b0a      	ldr	r3, [pc, #40]	; (80060cc <prvResetNextTaskUnblockTime+0x3c>)
 80060a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060a8:	e008      	b.n	80060bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060aa:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <prvResetNextTaskUnblockTime+0x38>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	4a04      	ldr	r2, [pc, #16]	; (80060cc <prvResetNextTaskUnblockTime+0x3c>)
 80060ba:	6013      	str	r3, [r2, #0]
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	20000b74 	.word	0x20000b74
 80060cc:	20000bdc 	.word	0x20000bdc

080060d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060d6:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <xTaskGetSchedulerState+0x34>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060de:	2301      	movs	r3, #1
 80060e0:	607b      	str	r3, [r7, #4]
 80060e2:	e008      	b.n	80060f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060e4:	4b08      	ldr	r3, [pc, #32]	; (8006108 <xTaskGetSchedulerState+0x38>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d102      	bne.n	80060f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060ec:	2302      	movs	r3, #2
 80060ee:	607b      	str	r3, [r7, #4]
 80060f0:	e001      	b.n	80060f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060f2:	2300      	movs	r3, #0
 80060f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060f6:	687b      	ldr	r3, [r7, #4]
	}
 80060f8:	4618      	mov	r0, r3
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	20000bc8 	.word	0x20000bc8
 8006108:	20000be4 	.word	0x20000be4

0800610c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006118:	2300      	movs	r3, #0
 800611a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d054      	beq.n	80061cc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006122:	4b2d      	ldr	r3, [pc, #180]	; (80061d8 <xTaskPriorityDisinherit+0xcc>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	429a      	cmp	r2, r3
 800612a:	d009      	beq.n	8006140 <xTaskPriorityDisinherit+0x34>
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	e7fe      	b.n	800613e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006144:	2b00      	cmp	r3, #0
 8006146:	d109      	bne.n	800615c <xTaskPriorityDisinherit+0x50>
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	60bb      	str	r3, [r7, #8]
 800615a:	e7fe      	b.n	800615a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006160:	1e5a      	subs	r2, r3, #1
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800616e:	429a      	cmp	r2, r3
 8006170:	d02c      	beq.n	80061cc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006176:	2b00      	cmp	r3, #0
 8006178:	d128      	bne.n	80061cc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	3304      	adds	r3, #4
 800617e:	4618      	mov	r0, r3
 8006180:	f7fe fca0 	bl	8004ac4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619c:	4b0f      	ldr	r3, [pc, #60]	; (80061dc <xTaskPriorityDisinherit+0xd0>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d903      	bls.n	80061ac <xTaskPriorityDisinherit+0xa0>
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	4a0c      	ldr	r2, [pc, #48]	; (80061dc <xTaskPriorityDisinherit+0xd0>)
 80061aa:	6013      	str	r3, [r2, #0]
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4a09      	ldr	r2, [pc, #36]	; (80061e0 <xTaskPriorityDisinherit+0xd4>)
 80061ba:	441a      	add	r2, r3
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	3304      	adds	r3, #4
 80061c0:	4619      	mov	r1, r3
 80061c2:	4610      	mov	r0, r2
 80061c4:	f7fe fc21 	bl	8004a0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061c8:	2301      	movs	r3, #1
 80061ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061cc:	697b      	ldr	r3, [r7, #20]
	}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	200006e8 	.word	0x200006e8
 80061dc:	20000bc4 	.word	0x20000bc4
 80061e0:	200006ec 	.word	0x200006ec

080061e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061ee:	4b21      	ldr	r3, [pc, #132]	; (8006274 <prvAddCurrentTaskToDelayedList+0x90>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061f4:	4b20      	ldr	r3, [pc, #128]	; (8006278 <prvAddCurrentTaskToDelayedList+0x94>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3304      	adds	r3, #4
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fe fc62 	bl	8004ac4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006206:	d10a      	bne.n	800621e <prvAddCurrentTaskToDelayedList+0x3a>
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d007      	beq.n	800621e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800620e:	4b1a      	ldr	r3, [pc, #104]	; (8006278 <prvAddCurrentTaskToDelayedList+0x94>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3304      	adds	r3, #4
 8006214:	4619      	mov	r1, r3
 8006216:	4819      	ldr	r0, [pc, #100]	; (800627c <prvAddCurrentTaskToDelayedList+0x98>)
 8006218:	f7fe fbf7 	bl	8004a0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800621c:	e026      	b.n	800626c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4413      	add	r3, r2
 8006224:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006226:	4b14      	ldr	r3, [pc, #80]	; (8006278 <prvAddCurrentTaskToDelayedList+0x94>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	429a      	cmp	r2, r3
 8006234:	d209      	bcs.n	800624a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006236:	4b12      	ldr	r3, [pc, #72]	; (8006280 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <prvAddCurrentTaskToDelayedList+0x94>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3304      	adds	r3, #4
 8006240:	4619      	mov	r1, r3
 8006242:	4610      	mov	r0, r2
 8006244:	f7fe fc05 	bl	8004a52 <vListInsert>
}
 8006248:	e010      	b.n	800626c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800624a:	4b0e      	ldr	r3, [pc, #56]	; (8006284 <prvAddCurrentTaskToDelayedList+0xa0>)
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <prvAddCurrentTaskToDelayedList+0x94>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3304      	adds	r3, #4
 8006254:	4619      	mov	r1, r3
 8006256:	4610      	mov	r0, r2
 8006258:	f7fe fbfb 	bl	8004a52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800625c:	4b0a      	ldr	r3, [pc, #40]	; (8006288 <prvAddCurrentTaskToDelayedList+0xa4>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	429a      	cmp	r2, r3
 8006264:	d202      	bcs.n	800626c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006266:	4a08      	ldr	r2, [pc, #32]	; (8006288 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	6013      	str	r3, [r2, #0]
}
 800626c:	bf00      	nop
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20000bc0 	.word	0x20000bc0
 8006278:	200006e8 	.word	0x200006e8
 800627c:	20000ba8 	.word	0x20000ba8
 8006280:	20000b78 	.word	0x20000b78
 8006284:	20000b74 	.word	0x20000b74
 8006288:	20000bdc 	.word	0x20000bdc

0800628c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b08a      	sub	sp, #40	; 0x28
 8006290:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006292:	2300      	movs	r3, #0
 8006294:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006296:	f000 faff 	bl	8006898 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800629a:	4b1c      	ldr	r3, [pc, #112]	; (800630c <xTimerCreateTimerTask+0x80>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d021      	beq.n	80062e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80062aa:	1d3a      	adds	r2, r7, #4
 80062ac:	f107 0108 	add.w	r1, r7, #8
 80062b0:	f107 030c 	add.w	r3, r7, #12
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fe fb61 	bl	800497c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	9202      	str	r2, [sp, #8]
 80062c2:	9301      	str	r3, [sp, #4]
 80062c4:	2302      	movs	r3, #2
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	2300      	movs	r3, #0
 80062ca:	460a      	mov	r2, r1
 80062cc:	4910      	ldr	r1, [pc, #64]	; (8006310 <xTimerCreateTimerTask+0x84>)
 80062ce:	4811      	ldr	r0, [pc, #68]	; (8006314 <xTimerCreateTimerTask+0x88>)
 80062d0:	f7ff f8f6 	bl	80054c0 <xTaskCreateStatic>
 80062d4:	4602      	mov	r2, r0
 80062d6:	4b10      	ldr	r3, [pc, #64]	; (8006318 <xTimerCreateTimerTask+0x8c>)
 80062d8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80062da:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <xTimerCreateTimerTask+0x8c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80062e2:	2301      	movs	r3, #1
 80062e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d109      	bne.n	8006300 <xTimerCreateTimerTask+0x74>
 80062ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	613b      	str	r3, [r7, #16]
 80062fe:	e7fe      	b.n	80062fe <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006300:	697b      	ldr	r3, [r7, #20]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	20000c18 	.word	0x20000c18
 8006310:	080071f8 	.word	0x080071f8
 8006314:	0800644d 	.word	0x0800644d
 8006318:	20000c1c 	.word	0x20000c1c

0800631c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b08a      	sub	sp, #40	; 0x28
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800632a:	2300      	movs	r3, #0
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d109      	bne.n	8006348 <xTimerGenericCommand+0x2c>
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	623b      	str	r3, [r7, #32]
 8006346:	e7fe      	b.n	8006346 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006348:	4b19      	ldr	r3, [pc, #100]	; (80063b0 <xTimerGenericCommand+0x94>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d02a      	beq.n	80063a6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b05      	cmp	r3, #5
 8006360:	dc18      	bgt.n	8006394 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006362:	f7ff feb5 	bl	80060d0 <xTaskGetSchedulerState>
 8006366:	4603      	mov	r3, r0
 8006368:	2b02      	cmp	r3, #2
 800636a:	d109      	bne.n	8006380 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800636c:	4b10      	ldr	r3, [pc, #64]	; (80063b0 <xTimerGenericCommand+0x94>)
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	f107 0110 	add.w	r1, r7, #16
 8006374:	2300      	movs	r3, #0
 8006376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006378:	f7fe fccc 	bl	8004d14 <xQueueGenericSend>
 800637c:	6278      	str	r0, [r7, #36]	; 0x24
 800637e:	e012      	b.n	80063a6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <xTimerGenericCommand+0x94>)
 8006382:	6818      	ldr	r0, [r3, #0]
 8006384:	f107 0110 	add.w	r1, r7, #16
 8006388:	2300      	movs	r3, #0
 800638a:	2200      	movs	r2, #0
 800638c:	f7fe fcc2 	bl	8004d14 <xQueueGenericSend>
 8006390:	6278      	str	r0, [r7, #36]	; 0x24
 8006392:	e008      	b.n	80063a6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006394:	4b06      	ldr	r3, [pc, #24]	; (80063b0 <xTimerGenericCommand+0x94>)
 8006396:	6818      	ldr	r0, [r3, #0]
 8006398:	f107 0110 	add.w	r1, r7, #16
 800639c:	2300      	movs	r3, #0
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	f7fe fdb2 	bl	8004f08 <xQueueGenericSendFromISR>
 80063a4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3728      	adds	r7, #40	; 0x28
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	20000c18 	.word	0x20000c18

080063b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063be:	4b22      	ldr	r3, [pc, #136]	; (8006448 <prvProcessExpiredTimer+0x94>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	3304      	adds	r3, #4
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fe fb79 	bl	8004ac4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d021      	beq.n	8006424 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	699a      	ldr	r2, [r3, #24]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	18d1      	adds	r1, r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	6978      	ldr	r0, [r7, #20]
 80063ee:	f000 f8d1 	bl	8006594 <prvInsertTimerInActiveList>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d01e      	beq.n	8006436 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063f8:	2300      	movs	r3, #0
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	2300      	movs	r3, #0
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	2100      	movs	r1, #0
 8006402:	6978      	ldr	r0, [r7, #20]
 8006404:	f7ff ff8a 	bl	800631c <xTimerGenericCommand>
 8006408:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d112      	bne.n	8006436 <prvProcessExpiredTimer+0x82>
 8006410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	e7fe      	b.n	8006422 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800642a:	f023 0301 	bic.w	r3, r3, #1
 800642e:	b2da      	uxtb	r2, r3
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	6978      	ldr	r0, [r7, #20]
 800643c:	4798      	blx	r3
}
 800643e:	bf00      	nop
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20000c10 	.word	0x20000c10

0800644c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006454:	f107 0308 	add.w	r3, r7, #8
 8006458:	4618      	mov	r0, r3
 800645a:	f000 f857 	bl	800650c <prvGetNextExpireTime>
 800645e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4619      	mov	r1, r3
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 f803 	bl	8006470 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800646a:	f000 f8d5 	bl	8006618 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800646e:	e7f1      	b.n	8006454 <prvTimerTask+0x8>

08006470 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800647a:	f7ff fa57 	bl	800592c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800647e:	f107 0308 	add.w	r3, r7, #8
 8006482:	4618      	mov	r0, r3
 8006484:	f000 f866 	bl	8006554 <prvSampleTimeNow>
 8006488:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d130      	bne.n	80064f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10a      	bne.n	80064ac <prvProcessTimerOrBlockTask+0x3c>
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	429a      	cmp	r2, r3
 800649c:	d806      	bhi.n	80064ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800649e:	f7ff fa53 	bl	8005948 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80064a2:	68f9      	ldr	r1, [r7, #12]
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff ff85 	bl	80063b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80064aa:	e024      	b.n	80064f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d008      	beq.n	80064c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064b2:	4b13      	ldr	r3, [pc, #76]	; (8006500 <prvProcessTimerOrBlockTask+0x90>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <prvProcessTimerOrBlockTask+0x50>
 80064bc:	2301      	movs	r3, #1
 80064be:	e000      	b.n	80064c2 <prvProcessTimerOrBlockTask+0x52>
 80064c0:	2300      	movs	r3, #0
 80064c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80064c4:	4b0f      	ldr	r3, [pc, #60]	; (8006504 <prvProcessTimerOrBlockTask+0x94>)
 80064c6:	6818      	ldr	r0, [r3, #0]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	4619      	mov	r1, r3
 80064d2:	f7fe ffc1 	bl	8005458 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80064d6:	f7ff fa37 	bl	8005948 <xTaskResumeAll>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064e0:	4b09      	ldr	r3, [pc, #36]	; (8006508 <prvProcessTimerOrBlockTask+0x98>)
 80064e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	f3bf 8f6f 	isb	sy
}
 80064f0:	e001      	b.n	80064f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064f2:	f7ff fa29 	bl	8005948 <xTaskResumeAll>
}
 80064f6:	bf00      	nop
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20000c14 	.word	0x20000c14
 8006504:	20000c18 	.word	0x20000c18
 8006508:	e000ed04 	.word	0xe000ed04

0800650c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006514:	4b0e      	ldr	r3, [pc, #56]	; (8006550 <prvGetNextExpireTime+0x44>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <prvGetNextExpireTime+0x16>
 800651e:	2201      	movs	r2, #1
 8006520:	e000      	b.n	8006524 <prvGetNextExpireTime+0x18>
 8006522:	2200      	movs	r2, #0
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d105      	bne.n	800653c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006530:	4b07      	ldr	r3, [pc, #28]	; (8006550 <prvGetNextExpireTime+0x44>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	e001      	b.n	8006540 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006540:	68fb      	ldr	r3, [r7, #12]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	20000c10 	.word	0x20000c10

08006554 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800655c:	f7ff fa90 	bl	8005a80 <xTaskGetTickCount>
 8006560:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006562:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <prvSampleTimeNow+0x3c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	429a      	cmp	r2, r3
 800656a:	d205      	bcs.n	8006578 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800656c:	f000 f930 	bl	80067d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	e002      	b.n	800657e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800657e:	4a04      	ldr	r2, [pc, #16]	; (8006590 <prvSampleTimeNow+0x3c>)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006584:	68fb      	ldr	r3, [r7, #12]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20000c20 	.word	0x20000c20

08006594 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80065a2:	2300      	movs	r3, #0
 80065a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d812      	bhi.n	80065e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	1ad2      	subs	r2, r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d302      	bcc.n	80065ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80065c8:	2301      	movs	r3, #1
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	e01b      	b.n	8006606 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065ce:	4b10      	ldr	r3, [pc, #64]	; (8006610 <prvInsertTimerInActiveList+0x7c>)
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3304      	adds	r3, #4
 80065d6:	4619      	mov	r1, r3
 80065d8:	4610      	mov	r0, r2
 80065da:	f7fe fa3a 	bl	8004a52 <vListInsert>
 80065de:	e012      	b.n	8006606 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d206      	bcs.n	80065f6 <prvInsertTimerInActiveList+0x62>
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d302      	bcc.n	80065f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065f0:	2301      	movs	r3, #1
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	e007      	b.n	8006606 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065f6:	4b07      	ldr	r3, [pc, #28]	; (8006614 <prvInsertTimerInActiveList+0x80>)
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3304      	adds	r3, #4
 80065fe:	4619      	mov	r1, r3
 8006600:	4610      	mov	r0, r2
 8006602:	f7fe fa26 	bl	8004a52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006606:	697b      	ldr	r3, [r7, #20]
}
 8006608:	4618      	mov	r0, r3
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	20000c14 	.word	0x20000c14
 8006614:	20000c10 	.word	0x20000c10

08006618 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08e      	sub	sp, #56	; 0x38
 800661c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800661e:	e0c6      	b.n	80067ae <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	da17      	bge.n	8006656 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006626:	1d3b      	adds	r3, r7, #4
 8006628:	3304      	adds	r3, #4
 800662a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	2b00      	cmp	r3, #0
 8006630:	d109      	bne.n	8006646 <prvProcessReceivedCommands+0x2e>
 8006632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	61fb      	str	r3, [r7, #28]
 8006644:	e7fe      	b.n	8006644 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800664c:	6850      	ldr	r0, [r2, #4]
 800664e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006650:	6892      	ldr	r2, [r2, #8]
 8006652:	4611      	mov	r1, r2
 8006654:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	f2c0 80a7 	blt.w	80067ac <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d004      	beq.n	8006674 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	3304      	adds	r3, #4
 800666e:	4618      	mov	r0, r3
 8006670:	f7fe fa28 	bl	8004ac4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006674:	463b      	mov	r3, r7
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff ff6c 	bl	8006554 <prvSampleTimeNow>
 800667c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b09      	cmp	r3, #9
 8006682:	f200 8094 	bhi.w	80067ae <prvProcessReceivedCommands+0x196>
 8006686:	a201      	add	r2, pc, #4	; (adr r2, 800668c <prvProcessReceivedCommands+0x74>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	080066b5 	.word	0x080066b5
 8006690:	080066b5 	.word	0x080066b5
 8006694:	080066b5 	.word	0x080066b5
 8006698:	08006727 	.word	0x08006727
 800669c:	0800673b 	.word	0x0800673b
 80066a0:	08006783 	.word	0x08006783
 80066a4:	080066b5 	.word	0x080066b5
 80066a8:	080066b5 	.word	0x080066b5
 80066ac:	08006727 	.word	0x08006727
 80066b0:	0800673b 	.word	0x0800673b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066ba:	f043 0301 	orr.w	r3, r3, #1
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	18d1      	adds	r1, r2, r3
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066d4:	f7ff ff5e 	bl	8006594 <prvInsertTimerInActiveList>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d067      	beq.n	80067ae <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066ec:	f003 0304 	and.w	r3, r3, #4
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d05c      	beq.n	80067ae <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	441a      	add	r2, r3
 80066fc:	2300      	movs	r3, #0
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	2300      	movs	r3, #0
 8006702:	2100      	movs	r1, #0
 8006704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006706:	f7ff fe09 	bl	800631c <xTimerGenericCommand>
 800670a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d14d      	bne.n	80067ae <prvProcessReceivedCommands+0x196>
 8006712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	61bb      	str	r3, [r7, #24]
 8006724:	e7fe      	b.n	8006724 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800672c:	f023 0301 	bic.w	r3, r3, #1
 8006730:	b2da      	uxtb	r2, r3
 8006732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006734:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006738:	e039      	b.n	80067ae <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006740:	f043 0301 	orr.w	r3, r3, #1
 8006744:	b2da      	uxtb	r2, r3
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006750:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d109      	bne.n	800676e <prvProcessReceivedCommands+0x156>
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	e7fe      	b.n	800676c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006770:	699a      	ldr	r2, [r3, #24]
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	18d1      	adds	r1, r2, r3
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800677c:	f7ff ff0a 	bl	8006594 <prvInsertTimerInActiveList>
					break;
 8006780:	e015      	b.n	80067ae <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006788:	f003 0302 	and.w	r3, r3, #2
 800678c:	2b00      	cmp	r3, #0
 800678e:	d103      	bne.n	8006798 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006792:	f000 fbc7 	bl	8006f24 <vPortFree>
 8006796:	e00a      	b.n	80067ae <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800679e:	f023 0301 	bic.w	r3, r3, #1
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80067aa:	e000      	b.n	80067ae <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80067ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067ae:	4b07      	ldr	r3, [pc, #28]	; (80067cc <prvProcessReceivedCommands+0x1b4>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	1d39      	adds	r1, r7, #4
 80067b4:	2200      	movs	r2, #0
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fe fc3a 	bl	8005030 <xQueueReceive>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f47f af2e 	bne.w	8006620 <prvProcessReceivedCommands+0x8>
	}
}
 80067c4:	bf00      	nop
 80067c6:	3730      	adds	r7, #48	; 0x30
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20000c18 	.word	0x20000c18

080067d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b088      	sub	sp, #32
 80067d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067d6:	e047      	b.n	8006868 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067d8:	4b2d      	ldr	r3, [pc, #180]	; (8006890 <prvSwitchTimerLists+0xc0>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067e2:	4b2b      	ldr	r3, [pc, #172]	; (8006890 <prvSwitchTimerLists+0xc0>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3304      	adds	r3, #4
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7fe f967 	bl	8004ac4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b00      	cmp	r3, #0
 800680a:	d02d      	beq.n	8006868 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4413      	add	r3, r2
 8006814:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	429a      	cmp	r2, r3
 800681c:	d90e      	bls.n	800683c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800682a:	4b19      	ldr	r3, [pc, #100]	; (8006890 <prvSwitchTimerLists+0xc0>)
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3304      	adds	r3, #4
 8006832:	4619      	mov	r1, r3
 8006834:	4610      	mov	r0, r2
 8006836:	f7fe f90c 	bl	8004a52 <vListInsert>
 800683a:	e015      	b.n	8006868 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800683c:	2300      	movs	r3, #0
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	2300      	movs	r3, #0
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	2100      	movs	r1, #0
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f7ff fd68 	bl	800631c <xTimerGenericCommand>
 800684c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d109      	bne.n	8006868 <prvSwitchTimerLists+0x98>
 8006854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006858:	f383 8811 	msr	BASEPRI, r3
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	603b      	str	r3, [r7, #0]
 8006866:	e7fe      	b.n	8006866 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006868:	4b09      	ldr	r3, [pc, #36]	; (8006890 <prvSwitchTimerLists+0xc0>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1b2      	bne.n	80067d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006872:	4b07      	ldr	r3, [pc, #28]	; (8006890 <prvSwitchTimerLists+0xc0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006878:	4b06      	ldr	r3, [pc, #24]	; (8006894 <prvSwitchTimerLists+0xc4>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a04      	ldr	r2, [pc, #16]	; (8006890 <prvSwitchTimerLists+0xc0>)
 800687e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006880:	4a04      	ldr	r2, [pc, #16]	; (8006894 <prvSwitchTimerLists+0xc4>)
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	6013      	str	r3, [r2, #0]
}
 8006886:	bf00      	nop
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	20000c10 	.word	0x20000c10
 8006894:	20000c14 	.word	0x20000c14

08006898 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800689e:	f000 f965 	bl	8006b6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80068a2:	4b15      	ldr	r3, [pc, #84]	; (80068f8 <prvCheckForValidListAndQueue+0x60>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d120      	bne.n	80068ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80068aa:	4814      	ldr	r0, [pc, #80]	; (80068fc <prvCheckForValidListAndQueue+0x64>)
 80068ac:	f7fe f880 	bl	80049b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80068b0:	4813      	ldr	r0, [pc, #76]	; (8006900 <prvCheckForValidListAndQueue+0x68>)
 80068b2:	f7fe f87d 	bl	80049b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80068b6:	4b13      	ldr	r3, [pc, #76]	; (8006904 <prvCheckForValidListAndQueue+0x6c>)
 80068b8:	4a10      	ldr	r2, [pc, #64]	; (80068fc <prvCheckForValidListAndQueue+0x64>)
 80068ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80068bc:	4b12      	ldr	r3, [pc, #72]	; (8006908 <prvCheckForValidListAndQueue+0x70>)
 80068be:	4a10      	ldr	r2, [pc, #64]	; (8006900 <prvCheckForValidListAndQueue+0x68>)
 80068c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068c2:	2300      	movs	r3, #0
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	4b11      	ldr	r3, [pc, #68]	; (800690c <prvCheckForValidListAndQueue+0x74>)
 80068c8:	4a11      	ldr	r2, [pc, #68]	; (8006910 <prvCheckForValidListAndQueue+0x78>)
 80068ca:	2110      	movs	r1, #16
 80068cc:	200a      	movs	r0, #10
 80068ce:	f7fe f98b 	bl	8004be8 <xQueueGenericCreateStatic>
 80068d2:	4602      	mov	r2, r0
 80068d4:	4b08      	ldr	r3, [pc, #32]	; (80068f8 <prvCheckForValidListAndQueue+0x60>)
 80068d6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068d8:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <prvCheckForValidListAndQueue+0x60>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d005      	beq.n	80068ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068e0:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <prvCheckForValidListAndQueue+0x60>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	490b      	ldr	r1, [pc, #44]	; (8006914 <prvCheckForValidListAndQueue+0x7c>)
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe fd8e 	bl	8005408 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068ec:	f000 f96c 	bl	8006bc8 <vPortExitCritical>
}
 80068f0:	bf00      	nop
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20000c18 	.word	0x20000c18
 80068fc:	20000be8 	.word	0x20000be8
 8006900:	20000bfc 	.word	0x20000bfc
 8006904:	20000c10 	.word	0x20000c10
 8006908:	20000c14 	.word	0x20000c14
 800690c:	20000cc4 	.word	0x20000cc4
 8006910:	20000c24 	.word	0x20000c24
 8006914:	08007200 	.word	0x08007200

08006918 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3b04      	subs	r3, #4
 8006928:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006930:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3b04      	subs	r3, #4
 8006936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f023 0201 	bic.w	r2, r3, #1
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3b04      	subs	r3, #4
 8006946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006948:	4a0c      	ldr	r2, [pc, #48]	; (800697c <pxPortInitialiseStack+0x64>)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3b14      	subs	r3, #20
 8006952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3b04      	subs	r3, #4
 800695e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f06f 0202 	mvn.w	r2, #2
 8006966:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	3b20      	subs	r3, #32
 800696c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800696e:	68fb      	ldr	r3, [r7, #12]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	08006981 	.word	0x08006981

08006980 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800698a:	4b11      	ldr	r3, [pc, #68]	; (80069d0 <prvTaskExitError+0x50>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006992:	d009      	beq.n	80069a8 <prvTaskExitError+0x28>
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	e7fe      	b.n	80069a6 <prvTaskExitError+0x26>
 80069a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069ba:	bf00      	nop
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d0fc      	beq.n	80069bc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069c2:	bf00      	nop
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	2000000c 	.word	0x2000000c
	...

080069e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069e0:	4b07      	ldr	r3, [pc, #28]	; (8006a00 <pxCurrentTCBConst2>)
 80069e2:	6819      	ldr	r1, [r3, #0]
 80069e4:	6808      	ldr	r0, [r1, #0]
 80069e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ea:	f380 8809 	msr	PSP, r0
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f04f 0000 	mov.w	r0, #0
 80069f6:	f380 8811 	msr	BASEPRI, r0
 80069fa:	4770      	bx	lr
 80069fc:	f3af 8000 	nop.w

08006a00 <pxCurrentTCBConst2>:
 8006a00:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop

08006a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a08:	4808      	ldr	r0, [pc, #32]	; (8006a2c <prvPortStartFirstTask+0x24>)
 8006a0a:	6800      	ldr	r0, [r0, #0]
 8006a0c:	6800      	ldr	r0, [r0, #0]
 8006a0e:	f380 8808 	msr	MSP, r0
 8006a12:	f04f 0000 	mov.w	r0, #0
 8006a16:	f380 8814 	msr	CONTROL, r0
 8006a1a:	b662      	cpsie	i
 8006a1c:	b661      	cpsie	f
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	df00      	svc	0
 8006a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a2a:	bf00      	nop
 8006a2c:	e000ed08 	.word	0xe000ed08

08006a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a36:	4b44      	ldr	r3, [pc, #272]	; (8006b48 <xPortStartScheduler+0x118>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a44      	ldr	r2, [pc, #272]	; (8006b4c <xPortStartScheduler+0x11c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d109      	bne.n	8006a54 <xPortStartScheduler+0x24>
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	613b      	str	r3, [r7, #16]
 8006a52:	e7fe      	b.n	8006a52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a54:	4b3c      	ldr	r3, [pc, #240]	; (8006b48 <xPortStartScheduler+0x118>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a3d      	ldr	r2, [pc, #244]	; (8006b50 <xPortStartScheduler+0x120>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d109      	bne.n	8006a72 <xPortStartScheduler+0x42>
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	e7fe      	b.n	8006a70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a72:	4b38      	ldr	r3, [pc, #224]	; (8006b54 <xPortStartScheduler+0x124>)
 8006a74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	22ff      	movs	r2, #255	; 0xff
 8006a82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a8c:	78fb      	ldrb	r3, [r7, #3]
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	4b30      	ldr	r3, [pc, #192]	; (8006b58 <xPortStartScheduler+0x128>)
 8006a98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a9a:	4b30      	ldr	r3, [pc, #192]	; (8006b5c <xPortStartScheduler+0x12c>)
 8006a9c:	2207      	movs	r2, #7
 8006a9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006aa0:	e009      	b.n	8006ab6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006aa2:	4b2e      	ldr	r3, [pc, #184]	; (8006b5c <xPortStartScheduler+0x12c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	4a2c      	ldr	r2, [pc, #176]	; (8006b5c <xPortStartScheduler+0x12c>)
 8006aaa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006aac:	78fb      	ldrb	r3, [r7, #3]
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ab6:	78fb      	ldrb	r3, [r7, #3]
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006abe:	2b80      	cmp	r3, #128	; 0x80
 8006ac0:	d0ef      	beq.n	8006aa2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ac2:	4b26      	ldr	r3, [pc, #152]	; (8006b5c <xPortStartScheduler+0x12c>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f1c3 0307 	rsb	r3, r3, #7
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	d009      	beq.n	8006ae2 <xPortStartScheduler+0xb2>
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	60bb      	str	r3, [r7, #8]
 8006ae0:	e7fe      	b.n	8006ae0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ae2:	4b1e      	ldr	r3, [pc, #120]	; (8006b5c <xPortStartScheduler+0x12c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	021b      	lsls	r3, r3, #8
 8006ae8:	4a1c      	ldr	r2, [pc, #112]	; (8006b5c <xPortStartScheduler+0x12c>)
 8006aea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006aec:	4b1b      	ldr	r3, [pc, #108]	; (8006b5c <xPortStartScheduler+0x12c>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006af4:	4a19      	ldr	r2, [pc, #100]	; (8006b5c <xPortStartScheduler+0x12c>)
 8006af6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b00:	4b17      	ldr	r3, [pc, #92]	; (8006b60 <xPortStartScheduler+0x130>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a16      	ldr	r2, [pc, #88]	; (8006b60 <xPortStartScheduler+0x130>)
 8006b06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b0c:	4b14      	ldr	r3, [pc, #80]	; (8006b60 <xPortStartScheduler+0x130>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a13      	ldr	r2, [pc, #76]	; (8006b60 <xPortStartScheduler+0x130>)
 8006b12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b18:	f000 f8d6 	bl	8006cc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b1c:	4b11      	ldr	r3, [pc, #68]	; (8006b64 <xPortStartScheduler+0x134>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b22:	f000 f8f5 	bl	8006d10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b26:	4b10      	ldr	r3, [pc, #64]	; (8006b68 <xPortStartScheduler+0x138>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a0f      	ldr	r2, [pc, #60]	; (8006b68 <xPortStartScheduler+0x138>)
 8006b2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b32:	f7ff ff69 	bl	8006a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b36:	f7ff f86b 	bl	8005c10 <vTaskSwitchContext>
	prvTaskExitError();
 8006b3a:	f7ff ff21 	bl	8006980 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	e000ed00 	.word	0xe000ed00
 8006b4c:	410fc271 	.word	0x410fc271
 8006b50:	410fc270 	.word	0x410fc270
 8006b54:	e000e400 	.word	0xe000e400
 8006b58:	20000d14 	.word	0x20000d14
 8006b5c:	20000d18 	.word	0x20000d18
 8006b60:	e000ed20 	.word	0xe000ed20
 8006b64:	2000000c 	.word	0x2000000c
 8006b68:	e000ef34 	.word	0xe000ef34

08006b6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b84:	4b0e      	ldr	r3, [pc, #56]	; (8006bc0 <vPortEnterCritical+0x54>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	4a0d      	ldr	r2, [pc, #52]	; (8006bc0 <vPortEnterCritical+0x54>)
 8006b8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b8e:	4b0c      	ldr	r3, [pc, #48]	; (8006bc0 <vPortEnterCritical+0x54>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d10e      	bne.n	8006bb4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b96:	4b0b      	ldr	r3, [pc, #44]	; (8006bc4 <vPortEnterCritical+0x58>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d009      	beq.n	8006bb4 <vPortEnterCritical+0x48>
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	603b      	str	r3, [r7, #0]
 8006bb2:	e7fe      	b.n	8006bb2 <vPortEnterCritical+0x46>
	}
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	2000000c 	.word	0x2000000c
 8006bc4:	e000ed04 	.word	0xe000ed04

08006bc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006bce:	4b11      	ldr	r3, [pc, #68]	; (8006c14 <vPortExitCritical+0x4c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d109      	bne.n	8006bea <vPortExitCritical+0x22>
 8006bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	607b      	str	r3, [r7, #4]
 8006be8:	e7fe      	b.n	8006be8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006bea:	4b0a      	ldr	r3, [pc, #40]	; (8006c14 <vPortExitCritical+0x4c>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	4a08      	ldr	r2, [pc, #32]	; (8006c14 <vPortExitCritical+0x4c>)
 8006bf2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006bf4:	4b07      	ldr	r3, [pc, #28]	; (8006c14 <vPortExitCritical+0x4c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d104      	bne.n	8006c06 <vPortExitCritical+0x3e>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	2000000c 	.word	0x2000000c
	...

08006c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c20:	f3ef 8009 	mrs	r0, PSP
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	4b15      	ldr	r3, [pc, #84]	; (8006c80 <pxCurrentTCBConst>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	f01e 0f10 	tst.w	lr, #16
 8006c30:	bf08      	it	eq
 8006c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c3a:	6010      	str	r0, [r2, #0]
 8006c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c44:	f380 8811 	msr	BASEPRI, r0
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f7fe ffde 	bl	8005c10 <vTaskSwitchContext>
 8006c54:	f04f 0000 	mov.w	r0, #0
 8006c58:	f380 8811 	msr	BASEPRI, r0
 8006c5c:	bc09      	pop	{r0, r3}
 8006c5e:	6819      	ldr	r1, [r3, #0]
 8006c60:	6808      	ldr	r0, [r1, #0]
 8006c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c66:	f01e 0f10 	tst.w	lr, #16
 8006c6a:	bf08      	it	eq
 8006c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c70:	f380 8809 	msr	PSP, r0
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	f3af 8000 	nop.w

08006c80 <pxCurrentTCBConst>:
 8006c80:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c84:	bf00      	nop
 8006c86:	bf00      	nop

08006c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ca0:	f7fe fefe 	bl	8005aa0 <xTaskIncrementTick>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006caa:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <SysTick_Handler+0x3c>)
 8006cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cbc:	bf00      	nop
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	e000ed04 	.word	0xe000ed04

08006cc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cc8:	b480      	push	{r7}
 8006cca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ccc:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <vPortSetupTimerInterrupt+0x34>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cd2:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <vPortSetupTimerInterrupt+0x38>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006cd8:	4b0a      	ldr	r3, [pc, #40]	; (8006d04 <vPortSetupTimerInterrupt+0x3c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a0a      	ldr	r2, [pc, #40]	; (8006d08 <vPortSetupTimerInterrupt+0x40>)
 8006cde:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce2:	099b      	lsrs	r3, r3, #6
 8006ce4:	4a09      	ldr	r2, [pc, #36]	; (8006d0c <vPortSetupTimerInterrupt+0x44>)
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006cea:	4b04      	ldr	r3, [pc, #16]	; (8006cfc <vPortSetupTimerInterrupt+0x34>)
 8006cec:	2207      	movs	r2, #7
 8006cee:	601a      	str	r2, [r3, #0]
}
 8006cf0:	bf00      	nop
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	e000e010 	.word	0xe000e010
 8006d00:	e000e018 	.word	0xe000e018
 8006d04:	20000000 	.word	0x20000000
 8006d08:	10624dd3 	.word	0x10624dd3
 8006d0c:	e000e014 	.word	0xe000e014

08006d10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d20 <vPortEnableVFP+0x10>
 8006d14:	6801      	ldr	r1, [r0, #0]
 8006d16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d1a:	6001      	str	r1, [r0, #0]
 8006d1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d1e:	bf00      	nop
 8006d20:	e000ed88 	.word	0xe000ed88

08006d24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d2a:	f3ef 8305 	mrs	r3, IPSR
 8006d2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2b0f      	cmp	r3, #15
 8006d34:	d913      	bls.n	8006d5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d36:	4a16      	ldr	r2, [pc, #88]	; (8006d90 <vPortValidateInterruptPriority+0x6c>)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d40:	4b14      	ldr	r3, [pc, #80]	; (8006d94 <vPortValidateInterruptPriority+0x70>)
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	7afa      	ldrb	r2, [r7, #11]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d209      	bcs.n	8006d5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	607b      	str	r3, [r7, #4]
 8006d5c:	e7fe      	b.n	8006d5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d5e:	4b0e      	ldr	r3, [pc, #56]	; (8006d98 <vPortValidateInterruptPriority+0x74>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d66:	4b0d      	ldr	r3, [pc, #52]	; (8006d9c <vPortValidateInterruptPriority+0x78>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d909      	bls.n	8006d82 <vPortValidateInterruptPriority+0x5e>
 8006d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	e7fe      	b.n	8006d80 <vPortValidateInterruptPriority+0x5c>
	}
 8006d82:	bf00      	nop
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	e000e3f0 	.word	0xe000e3f0
 8006d94:	20000d14 	.word	0x20000d14
 8006d98:	e000ed0c 	.word	0xe000ed0c
 8006d9c:	20000d18 	.word	0x20000d18

08006da0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b08a      	sub	sp, #40	; 0x28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006da8:	2300      	movs	r3, #0
 8006daa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006dac:	f7fe fdbe 	bl	800592c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006db0:	4b57      	ldr	r3, [pc, #348]	; (8006f10 <pvPortMalloc+0x170>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006db8:	f000 f90c 	bl	8006fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006dbc:	4b55      	ldr	r3, [pc, #340]	; (8006f14 <pvPortMalloc+0x174>)
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f040 808c 	bne.w	8006ee2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d01c      	beq.n	8006e0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006dd0:	2208      	movs	r2, #8
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f003 0307 	and.w	r3, r3, #7
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d013      	beq.n	8006e0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f023 0307 	bic.w	r3, r3, #7
 8006de8:	3308      	adds	r3, #8
 8006dea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f003 0307 	and.w	r3, r3, #7
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d009      	beq.n	8006e0a <pvPortMalloc+0x6a>
 8006df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	e7fe      	b.n	8006e08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d068      	beq.n	8006ee2 <pvPortMalloc+0x142>
 8006e10:	4b41      	ldr	r3, [pc, #260]	; (8006f18 <pvPortMalloc+0x178>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d863      	bhi.n	8006ee2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e1a:	4b40      	ldr	r3, [pc, #256]	; (8006f1c <pvPortMalloc+0x17c>)
 8006e1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e1e:	4b3f      	ldr	r3, [pc, #252]	; (8006f1c <pvPortMalloc+0x17c>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e24:	e004      	b.n	8006e30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d903      	bls.n	8006e42 <pvPortMalloc+0xa2>
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1f1      	bne.n	8006e26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e42:	4b33      	ldr	r3, [pc, #204]	; (8006f10 <pvPortMalloc+0x170>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d04a      	beq.n	8006ee2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2208      	movs	r2, #8
 8006e52:	4413      	add	r3, r2
 8006e54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	1ad2      	subs	r2, r2, r3
 8006e66:	2308      	movs	r3, #8
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d91e      	bls.n	8006eac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4413      	add	r3, r2
 8006e74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	f003 0307 	and.w	r3, r3, #7
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d009      	beq.n	8006e94 <pvPortMalloc+0xf4>
 8006e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	613b      	str	r3, [r7, #16]
 8006e92:	e7fe      	b.n	8006e92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	1ad2      	subs	r2, r2, r3
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ea6:	69b8      	ldr	r0, [r7, #24]
 8006ea8:	f000 f8f6 	bl	8007098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006eac:	4b1a      	ldr	r3, [pc, #104]	; (8006f18 <pvPortMalloc+0x178>)
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	4a18      	ldr	r2, [pc, #96]	; (8006f18 <pvPortMalloc+0x178>)
 8006eb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006eba:	4b17      	ldr	r3, [pc, #92]	; (8006f18 <pvPortMalloc+0x178>)
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	4b18      	ldr	r3, [pc, #96]	; (8006f20 <pvPortMalloc+0x180>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d203      	bcs.n	8006ece <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ec6:	4b14      	ldr	r3, [pc, #80]	; (8006f18 <pvPortMalloc+0x178>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a15      	ldr	r2, [pc, #84]	; (8006f20 <pvPortMalloc+0x180>)
 8006ecc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	4b10      	ldr	r3, [pc, #64]	; (8006f14 <pvPortMalloc+0x174>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	2200      	movs	r2, #0
 8006ee0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ee2:	f7fe fd31 	bl	8005948 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	f003 0307 	and.w	r3, r3, #7
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d009      	beq.n	8006f04 <pvPortMalloc+0x164>
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	e7fe      	b.n	8006f02 <pvPortMalloc+0x162>
	return pvReturn;
 8006f04:	69fb      	ldr	r3, [r7, #28]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3728      	adds	r7, #40	; 0x28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	20001924 	.word	0x20001924
 8006f14:	20001930 	.word	0x20001930
 8006f18:	20001928 	.word	0x20001928
 8006f1c:	2000191c 	.word	0x2000191c
 8006f20:	2000192c 	.word	0x2000192c

08006f24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d046      	beq.n	8006fc4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f36:	2308      	movs	r3, #8
 8006f38:	425b      	negs	r3, r3
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	4b20      	ldr	r3, [pc, #128]	; (8006fcc <vPortFree+0xa8>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d109      	bne.n	8006f66 <vPortFree+0x42>
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	e7fe      	b.n	8006f64 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d009      	beq.n	8006f82 <vPortFree+0x5e>
 8006f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f72:	f383 8811 	msr	BASEPRI, r3
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	60bb      	str	r3, [r7, #8]
 8006f80:	e7fe      	b.n	8006f80 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	4b11      	ldr	r3, [pc, #68]	; (8006fcc <vPortFree+0xa8>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d019      	beq.n	8006fc4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d115      	bne.n	8006fc4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <vPortFree+0xa8>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	43db      	mvns	r3, r3
 8006fa2:	401a      	ands	r2, r3
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006fa8:	f7fe fcc0 	bl	800592c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <vPortFree+0xac>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	4a06      	ldr	r2, [pc, #24]	; (8006fd0 <vPortFree+0xac>)
 8006fb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fba:	6938      	ldr	r0, [r7, #16]
 8006fbc:	f000 f86c 	bl	8007098 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006fc0:	f7fe fcc2 	bl	8005948 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006fc4:	bf00      	nop
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20001930 	.word	0x20001930
 8006fd0:	20001928 	.word	0x20001928

08006fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006fda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006fde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006fe0:	4b27      	ldr	r3, [pc, #156]	; (8007080 <prvHeapInit+0xac>)
 8006fe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00c      	beq.n	8007008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	3307      	adds	r3, #7
 8006ff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 0307 	bic.w	r3, r3, #7
 8006ffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	4a1f      	ldr	r2, [pc, #124]	; (8007080 <prvHeapInit+0xac>)
 8007004:	4413      	add	r3, r2
 8007006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800700c:	4a1d      	ldr	r2, [pc, #116]	; (8007084 <prvHeapInit+0xb0>)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007012:	4b1c      	ldr	r3, [pc, #112]	; (8007084 <prvHeapInit+0xb0>)
 8007014:	2200      	movs	r2, #0
 8007016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	4413      	add	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007020:	2208      	movs	r2, #8
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	1a9b      	subs	r3, r3, r2
 8007026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 0307 	bic.w	r3, r3, #7
 800702e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4a15      	ldr	r2, [pc, #84]	; (8007088 <prvHeapInit+0xb4>)
 8007034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007036:	4b14      	ldr	r3, [pc, #80]	; (8007088 <prvHeapInit+0xb4>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2200      	movs	r2, #0
 800703c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800703e:	4b12      	ldr	r3, [pc, #72]	; (8007088 <prvHeapInit+0xb4>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2200      	movs	r2, #0
 8007044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	1ad2      	subs	r2, r2, r3
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007054:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <prvHeapInit+0xb4>)
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	4a0a      	ldr	r2, [pc, #40]	; (800708c <prvHeapInit+0xb8>)
 8007062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	4a09      	ldr	r2, [pc, #36]	; (8007090 <prvHeapInit+0xbc>)
 800706a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800706c:	4b09      	ldr	r3, [pc, #36]	; (8007094 <prvHeapInit+0xc0>)
 800706e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007072:	601a      	str	r2, [r3, #0]
}
 8007074:	bf00      	nop
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	20000d1c 	.word	0x20000d1c
 8007084:	2000191c 	.word	0x2000191c
 8007088:	20001924 	.word	0x20001924
 800708c:	2000192c 	.word	0x2000192c
 8007090:	20001928 	.word	0x20001928
 8007094:	20001930 	.word	0x20001930

08007098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070a0:	4b28      	ldr	r3, [pc, #160]	; (8007144 <prvInsertBlockIntoFreeList+0xac>)
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	e002      	b.n	80070ac <prvInsertBlockIntoFreeList+0x14>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d8f7      	bhi.n	80070a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	4413      	add	r3, r2
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d108      	bne.n	80070da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	441a      	add	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	441a      	add	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d118      	bne.n	8007120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	4b15      	ldr	r3, [pc, #84]	; (8007148 <prvInsertBlockIntoFreeList+0xb0>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d00d      	beq.n	8007116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	441a      	add	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	e008      	b.n	8007128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007116:	4b0c      	ldr	r3, [pc, #48]	; (8007148 <prvInsertBlockIntoFreeList+0xb0>)
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	e003      	b.n	8007128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	429a      	cmp	r2, r3
 800712e:	d002      	beq.n	8007136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007136:	bf00      	nop
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	2000191c 	.word	0x2000191c
 8007148:	20001924 	.word	0x20001924

0800714c <__libc_init_array>:
 800714c:	b570      	push	{r4, r5, r6, lr}
 800714e:	4e0d      	ldr	r6, [pc, #52]	; (8007184 <__libc_init_array+0x38>)
 8007150:	4c0d      	ldr	r4, [pc, #52]	; (8007188 <__libc_init_array+0x3c>)
 8007152:	1ba4      	subs	r4, r4, r6
 8007154:	10a4      	asrs	r4, r4, #2
 8007156:	2500      	movs	r5, #0
 8007158:	42a5      	cmp	r5, r4
 800715a:	d109      	bne.n	8007170 <__libc_init_array+0x24>
 800715c:	4e0b      	ldr	r6, [pc, #44]	; (800718c <__libc_init_array+0x40>)
 800715e:	4c0c      	ldr	r4, [pc, #48]	; (8007190 <__libc_init_array+0x44>)
 8007160:	f000 f82c 	bl	80071bc <_init>
 8007164:	1ba4      	subs	r4, r4, r6
 8007166:	10a4      	asrs	r4, r4, #2
 8007168:	2500      	movs	r5, #0
 800716a:	42a5      	cmp	r5, r4
 800716c:	d105      	bne.n	800717a <__libc_init_array+0x2e>
 800716e:	bd70      	pop	{r4, r5, r6, pc}
 8007170:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007174:	4798      	blx	r3
 8007176:	3501      	adds	r5, #1
 8007178:	e7ee      	b.n	8007158 <__libc_init_array+0xc>
 800717a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800717e:	4798      	blx	r3
 8007180:	3501      	adds	r5, #1
 8007182:	e7f2      	b.n	800716a <__libc_init_array+0x1e>
 8007184:	08007264 	.word	0x08007264
 8007188:	08007264 	.word	0x08007264
 800718c:	08007264 	.word	0x08007264
 8007190:	08007268 	.word	0x08007268

08007194 <memcpy>:
 8007194:	b510      	push	{r4, lr}
 8007196:	1e43      	subs	r3, r0, #1
 8007198:	440a      	add	r2, r1
 800719a:	4291      	cmp	r1, r2
 800719c:	d100      	bne.n	80071a0 <memcpy+0xc>
 800719e:	bd10      	pop	{r4, pc}
 80071a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071a8:	e7f7      	b.n	800719a <memcpy+0x6>

080071aa <memset>:
 80071aa:	4402      	add	r2, r0
 80071ac:	4603      	mov	r3, r0
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d100      	bne.n	80071b4 <memset+0xa>
 80071b2:	4770      	bx	lr
 80071b4:	f803 1b01 	strb.w	r1, [r3], #1
 80071b8:	e7f9      	b.n	80071ae <memset+0x4>
	...

080071bc <_init>:
 80071bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071be:	bf00      	nop
 80071c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071c2:	bc08      	pop	{r3}
 80071c4:	469e      	mov	lr, r3
 80071c6:	4770      	bx	lr

080071c8 <_fini>:
 80071c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ca:	bf00      	nop
 80071cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ce:	bc08      	pop	{r3}
 80071d0:	469e      	mov	lr, r3
 80071d2:	4770      	bx	lr
